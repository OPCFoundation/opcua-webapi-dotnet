/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Opc.Ua.WebApi.Client;
using Opc.Ua.WebApi.Api;
// uncomment below to import models
//using Opc.Ua.WebApi.Model;

namespace Opc.Ua.WebApi.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test ActivateSession
        /// </summary>
        [Fact]
        public void ActivateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActivateSessionRequest? activateSessionRequest = null;
            //var response = instance.ActivateSession(activateSessionRequest);
            //Assert.IsType<ActivateSessionResponse>(response);
        }

        /// <summary>
        /// Test Browse
        /// </summary>
        [Fact]
        public void BrowseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrowseRequest? browseRequest = null;
            //var response = instance.Browse(browseRequest);
            //Assert.IsType<BrowseResponse>(response);
        }

        /// <summary>
        /// Test BrowseNext
        /// </summary>
        [Fact]
        public void BrowseNextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrowseNextRequest? browseNextRequest = null;
            //var response = instance.BrowseNext(browseNextRequest);
            //Assert.IsType<BrowseNextResponse>(response);
        }

        /// <summary>
        /// Test Call
        /// </summary>
        [Fact]
        public void CallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CallRequest? callRequest = null;
            //var response = instance.Call(callRequest);
            //Assert.IsType<CallResponse>(response);
        }

        /// <summary>
        /// Test Cancel
        /// </summary>
        [Fact]
        public void CancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CancelRequest? cancelRequest = null;
            //var response = instance.Cancel(cancelRequest);
            //Assert.IsType<CancelResponse>(response);
        }

        /// <summary>
        /// Test CloseSession
        /// </summary>
        [Fact]
        public void CloseSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseSessionRequest? closeSessionRequest = null;
            //var response = instance.CloseSession(closeSessionRequest);
            //Assert.IsType<CloseSessionResponse>(response);
        }

        /// <summary>
        /// Test CreateMonitoredItems
        /// </summary>
        [Fact]
        public void CreateMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateMonitoredItemsRequest? createMonitoredItemsRequest = null;
            //var response = instance.CreateMonitoredItems(createMonitoredItemsRequest);
            //Assert.IsType<CreateMonitoredItemsResponse>(response);
        }

        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Fact]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSessionRequest? createSessionRequest = null;
            //var response = instance.CreateSession(createSessionRequest);
            //Assert.IsType<CreateSessionResponse>(response);
        }

        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Fact]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubscriptionRequest? createSubscriptionRequest = null;
            //var response = instance.CreateSubscription(createSubscriptionRequest);
            //Assert.IsType<CreateSubscriptionResponse>(response);
        }

        /// <summary>
        /// Test DeleteMonitoredItems
        /// </summary>
        [Fact]
        public void DeleteMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = null;
            //var response = instance.DeleteMonitoredItems(deleteMonitoredItemsRequest);
            //Assert.IsType<DeleteMonitoredItemsResponse>(response);
        }

        /// <summary>
        /// Test DeleteSubscriptions
        /// </summary>
        [Fact]
        public void DeleteSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteSubscriptionsRequest? deleteSubscriptionsRequest = null;
            //var response = instance.DeleteSubscriptions(deleteSubscriptionsRequest);
            //Assert.IsType<DeleteSubscriptionsResponse>(response);
        }

        /// <summary>
        /// Test FindServers
        /// </summary>
        [Fact]
        public void FindServersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FindServersRequest? findServersRequest = null;
            //var response = instance.FindServers(findServersRequest);
            //Assert.IsType<FindServersResponse>(response);
        }

        /// <summary>
        /// Test GetEndpoints
        /// </summary>
        [Fact]
        public void GetEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetEndpointsRequest? getEndpointsRequest = null;
            //var response = instance.GetEndpoints(getEndpointsRequest);
            //Assert.IsType<GetEndpointsResponse>(response);
        }

        /// <summary>
        /// Test HistoryRead
        /// </summary>
        [Fact]
        public void HistoryReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoryReadRequest? historyReadRequest = null;
            //var response = instance.HistoryRead(historyReadRequest);
            //Assert.IsType<HistoryReadResponse>(response);
        }

        /// <summary>
        /// Test HistoryUpdate
        /// </summary>
        [Fact]
        public void HistoryUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoryUpdateRequest? historyUpdateRequest = null;
            //var response = instance.HistoryUpdate(historyUpdateRequest);
            //Assert.IsType<HistoryUpdateResponse>(response);
        }

        /// <summary>
        /// Test ModifyMonitoredItems
        /// </summary>
        [Fact]
        public void ModifyMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = null;
            //var response = instance.ModifyMonitoredItems(modifyMonitoredItemsRequest);
            //Assert.IsType<ModifyMonitoredItemsResponse>(response);
        }

        /// <summary>
        /// Test ModifySubscription
        /// </summary>
        [Fact]
        public void ModifySubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifySubscriptionRequest? modifySubscriptionRequest = null;
            //var response = instance.ModifySubscription(modifySubscriptionRequest);
            //Assert.IsType<ModifySubscriptionResponse>(response);
        }

        /// <summary>
        /// Test Publish
        /// </summary>
        [Fact]
        public void PublishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PublishRequest? publishRequest = null;
            //var response = instance.Publish(publishRequest);
            //Assert.IsType<PublishResponse>(response);
        }

        /// <summary>
        /// Test Read
        /// </summary>
        [Fact]
        public void ReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReadRequest? readRequest = null;
            //var response = instance.Read(readRequest);
            //Assert.IsType<ReadResponse>(response);
        }

        /// <summary>
        /// Test RegisterNodes
        /// </summary>
        [Fact]
        public void RegisterNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterNodesRequest? registerNodesRequest = null;
            //var response = instance.RegisterNodes(registerNodesRequest);
            //Assert.IsType<RegisterNodesResponse>(response);
        }

        /// <summary>
        /// Test Republish
        /// </summary>
        [Fact]
        public void RepublishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RepublishRequest? republishRequest = null;
            //var response = instance.Republish(republishRequest);
            //Assert.IsType<RepublishResponse>(response);
        }

        /// <summary>
        /// Test SetMonitoringMode
        /// </summary>
        [Fact]
        public void SetMonitoringModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetMonitoringModeRequest? setMonitoringModeRequest = null;
            //var response = instance.SetMonitoringMode(setMonitoringModeRequest);
            //Assert.IsType<SetMonitoringModeResponse>(response);
        }

        /// <summary>
        /// Test SetPublishingMode
        /// </summary>
        [Fact]
        public void SetPublishingModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetPublishingModeRequest? setPublishingModeRequest = null;
            //var response = instance.SetPublishingMode(setPublishingModeRequest);
            //Assert.IsType<SetPublishingModeResponse>(response);
        }

        /// <summary>
        /// Test SetTriggering
        /// </summary>
        [Fact]
        public void SetTriggeringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetTriggeringRequest? setTriggeringRequest = null;
            //var response = instance.SetTriggering(setTriggeringRequest);
            //Assert.IsType<SetTriggeringResponse>(response);
        }

        /// <summary>
        /// Test TransferSubscriptions
        /// </summary>
        [Fact]
        public void TransferSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransferSubscriptionsRequest? transferSubscriptionsRequest = null;
            //var response = instance.TransferSubscriptions(transferSubscriptionsRequest);
            //Assert.IsType<TransferSubscriptionsResponse>(response);
        }

        /// <summary>
        /// Test TranslateBrowsePathsToNodeIds
        /// </summary>
        [Fact]
        public void TranslateBrowsePathsToNodeIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = null;
            //var response = instance.TranslateBrowsePathsToNodeIds(translateBrowsePathsToNodeIdsRequest);
            //Assert.IsType<TranslateBrowsePathsToNodeIdsResponse>(response);
        }

        /// <summary>
        /// Test UnregisterNodes
        /// </summary>
        [Fact]
        public void UnregisterNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnregisterNodesRequest? unregisterNodesRequest = null;
            //var response = instance.UnregisterNodes(unregisterNodesRequest);
            //Assert.IsType<UnregisterNodesResponse>(response);
        }

        /// <summary>
        /// Test Write
        /// </summary>
        [Fact]
        public void WriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRequest? writeRequest = null;
            //var response = instance.Write(writeRequest);
            //Assert.IsType<WriteResponse>(response);
        }
    }
}
