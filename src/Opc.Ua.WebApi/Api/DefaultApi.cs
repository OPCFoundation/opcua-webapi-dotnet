/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Opc.Ua.WebApi.Client;
using Opc.Ua.WebApi.Model;

namespace Opc.Ua.WebApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivateSessionResponse</returns>
        ActivateSessionResponse ActivateSession(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivateSessionResponse</returns>
        ApiResponse<ActivateSessionResponse> ActivateSessionWithHttpInfo(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseResponse</returns>
        BrowseResponse Browse(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseResponse</returns>
        ApiResponse<BrowseResponse> BrowseWithHttpInfo(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseNextResponse</returns>
        BrowseNextResponse BrowseNext(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseNextResponse</returns>
        ApiResponse<BrowseNextResponse> BrowseNextWithHttpInfo(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallResponse</returns>
        CallResponse Call(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallResponse</returns>
        ApiResponse<CallResponse> CallWithHttpInfo(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelResponse</returns>
        CancelResponse Cancel(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelResponse</returns>
        ApiResponse<CancelResponse> CancelWithHttpInfo(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloseSessionResponse</returns>
        CloseSessionResponse CloseSession(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloseSessionResponse</returns>
        ApiResponse<CloseSessionResponse> CloseSessionWithHttpInfo(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMonitoredItemsResponse</returns>
        CreateMonitoredItemsResponse CreateMonitoredItems(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMonitoredItemsResponse</returns>
        ApiResponse<CreateMonitoredItemsResponse> CreateMonitoredItemsWithHttpInfo(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSessionResponse</returns>
        CreateSessionResponse CreateSession(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        ApiResponse<CreateSessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubscriptionResponse</returns>
        CreateSubscriptionResponse CreateSubscription(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubscriptionResponse</returns>
        ApiResponse<CreateSubscriptionResponse> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMonitoredItemsResponse</returns>
        DeleteMonitoredItemsResponse DeleteMonitoredItems(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMonitoredItemsResponse</returns>
        ApiResponse<DeleteMonitoredItemsResponse> DeleteMonitoredItemsWithHttpInfo(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSubscriptionsResponse</returns>
        DeleteSubscriptionsResponse DeleteSubscriptions(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSubscriptionsResponse</returns>
        ApiResponse<DeleteSubscriptionsResponse> DeleteSubscriptionsWithHttpInfo(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FindServersResponse</returns>
        FindServersResponse FindServers(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FindServersResponse</returns>
        ApiResponse<FindServersResponse> FindServersWithHttpInfo(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEndpointsResponse</returns>
        GetEndpointsResponse GetEndpoints(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEndpointsResponse</returns>
        ApiResponse<GetEndpointsResponse> GetEndpointsWithHttpInfo(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryReadResponse</returns>
        HistoryReadResponse HistoryRead(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryReadResponse</returns>
        ApiResponse<HistoryReadResponse> HistoryReadWithHttpInfo(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryUpdateResponse</returns>
        HistoryUpdateResponse HistoryUpdate(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryUpdateResponse</returns>
        ApiResponse<HistoryUpdateResponse> HistoryUpdateWithHttpInfo(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyMonitoredItemsResponse</returns>
        ModifyMonitoredItemsResponse ModifyMonitoredItems(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyMonitoredItemsResponse</returns>
        ApiResponse<ModifyMonitoredItemsResponse> ModifyMonitoredItemsWithHttpInfo(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifySubscriptionResponse</returns>
        ModifySubscriptionResponse ModifySubscription(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifySubscriptionResponse</returns>
        ApiResponse<ModifySubscriptionResponse> ModifySubscriptionWithHttpInfo(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishResponse</returns>
        PublishResponse Publish(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishResponse</returns>
        ApiResponse<PublishResponse> PublishWithHttpInfo(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReadResponse</returns>
        ReadResponse Read(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        ApiResponse<ReadResponse> ReadWithHttpInfo(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterNodesResponse</returns>
        RegisterNodesResponse RegisterNodes(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterNodesResponse</returns>
        ApiResponse<RegisterNodesResponse> RegisterNodesWithHttpInfo(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepublishResponse</returns>
        RepublishResponse Republish(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepublishResponse</returns>
        ApiResponse<RepublishResponse> RepublishWithHttpInfo(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMonitoringModeResponse</returns>
        SetMonitoringModeResponse SetMonitoringMode(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMonitoringModeResponse</returns>
        ApiResponse<SetMonitoringModeResponse> SetMonitoringModeWithHttpInfo(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPublishingModeResponse</returns>
        SetPublishingModeResponse SetPublishingMode(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPublishingModeResponse</returns>
        ApiResponse<SetPublishingModeResponse> SetPublishingModeWithHttpInfo(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTriggeringResponse</returns>
        SetTriggeringResponse SetTriggering(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTriggeringResponse</returns>
        ApiResponse<SetTriggeringResponse> SetTriggeringWithHttpInfo(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSubscriptionsResponse</returns>
        TransferSubscriptionsResponse TransferSubscriptions(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSubscriptionsResponse</returns>
        ApiResponse<TransferSubscriptionsResponse> TransferSubscriptionsWithHttpInfo(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranslateBrowsePathsToNodeIdsResponse</returns>
        TranslateBrowsePathsToNodeIdsResponse TranslateBrowsePathsToNodeIds(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranslateBrowsePathsToNodeIdsResponse</returns>
        ApiResponse<TranslateBrowsePathsToNodeIdsResponse> TranslateBrowsePathsToNodeIdsWithHttpInfo(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnregisterNodesResponse</returns>
        UnregisterNodesResponse UnregisterNodes(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnregisterNodesResponse</returns>
        ApiResponse<UnregisterNodesResponse> UnregisterNodesWithHttpInfo(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WriteResponse</returns>
        WriteResponse Write(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WriteResponse</returns>
        ApiResponse<WriteResponse> WriteWithHttpInfo(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivateSessionResponse</returns>
        System.Threading.Tasks.Task<ActivateSessionResponse> ActivateSessionAsync(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateSessionResponse>> ActivateSessionWithHttpInfoAsync(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseResponse</returns>
        System.Threading.Tasks.Task<BrowseResponse> BrowseAsync(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseResponse>> BrowseWithHttpInfoAsync(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseNextResponse</returns>
        System.Threading.Tasks.Task<BrowseNextResponse> BrowseNextAsync(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseNextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNextResponse>> BrowseNextWithHttpInfoAsync(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResponse</returns>
        System.Threading.Tasks.Task<CallResponse> CallAsync(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallResponse>> CallWithHttpInfoAsync(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelResponse</returns>
        System.Threading.Tasks.Task<CancelResponse> CancelAsync(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelResponse>> CancelWithHttpInfoAsync(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloseSessionResponse</returns>
        System.Threading.Tasks.Task<CloseSessionResponse> CloseSessionAsync(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloseSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloseSessionResponse>> CloseSessionWithHttpInfoAsync(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMonitoredItemsResponse</returns>
        System.Threading.Tasks.Task<CreateMonitoredItemsResponse> CreateMonitoredItemsAsync(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMonitoredItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMonitoredItemsResponse>> CreateMonitoredItemsWithHttpInfoAsync(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponse</returns>
        System.Threading.Tasks.Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<CreateSubscriptionResponse> CreateSubscriptionAsync(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMonitoredItemsResponse</returns>
        System.Threading.Tasks.Task<DeleteMonitoredItemsResponse> DeleteMonitoredItemsAsync(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMonitoredItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteMonitoredItemsResponse>> DeleteMonitoredItemsWithHttpInfoAsync(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<DeleteSubscriptionsResponse> DeleteSubscriptionsAsync(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSubscriptionsResponse>> DeleteSubscriptionsWithHttpInfoAsync(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindServersResponse</returns>
        System.Threading.Tasks.Task<FindServersResponse> FindServersAsync(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindServersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindServersResponse>> FindServersWithHttpInfoAsync(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEndpointsResponse</returns>
        System.Threading.Tasks.Task<GetEndpointsResponse> GetEndpointsAsync(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEndpointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEndpointsResponse>> GetEndpointsWithHttpInfoAsync(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryReadResponse</returns>
        System.Threading.Tasks.Task<HistoryReadResponse> HistoryReadAsync(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryReadResponse>> HistoryReadWithHttpInfoAsync(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryUpdateResponse</returns>
        System.Threading.Tasks.Task<HistoryUpdateResponse> HistoryUpdateAsync(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryUpdateResponse>> HistoryUpdateWithHttpInfoAsync(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyMonitoredItemsResponse</returns>
        System.Threading.Tasks.Task<ModifyMonitoredItemsResponse> ModifyMonitoredItemsAsync(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyMonitoredItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyMonitoredItemsResponse>> ModifyMonitoredItemsWithHttpInfoAsync(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySubscriptionResponse</returns>
        System.Threading.Tasks.Task<ModifySubscriptionResponse> ModifySubscriptionAsync(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifySubscriptionResponse>> ModifySubscriptionWithHttpInfoAsync(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishResponse</returns>
        System.Threading.Tasks.Task<PublishResponse> PublishAsync(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishResponse>> PublishWithHttpInfoAsync(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadResponse</returns>
        System.Threading.Tasks.Task<ReadResponse> ReadAsync(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadResponse>> ReadWithHttpInfoAsync(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterNodesResponse</returns>
        System.Threading.Tasks.Task<RegisterNodesResponse> RegisterNodesAsync(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterNodesResponse>> RegisterNodesWithHttpInfoAsync(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepublishResponse</returns>
        System.Threading.Tasks.Task<RepublishResponse> RepublishAsync(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepublishResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepublishResponse>> RepublishWithHttpInfoAsync(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMonitoringModeResponse</returns>
        System.Threading.Tasks.Task<SetMonitoringModeResponse> SetMonitoringModeAsync(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMonitoringModeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetMonitoringModeResponse>> SetMonitoringModeWithHttpInfoAsync(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPublishingModeResponse</returns>
        System.Threading.Tasks.Task<SetPublishingModeResponse> SetPublishingModeAsync(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPublishingModeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPublishingModeResponse>> SetPublishingModeWithHttpInfoAsync(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTriggeringResponse</returns>
        System.Threading.Tasks.Task<SetTriggeringResponse> SetTriggeringAsync(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTriggeringResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetTriggeringResponse>> SetTriggeringWithHttpInfoAsync(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<TransferSubscriptionsResponse> TransferSubscriptionsAsync(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSubscriptionsResponse>> TransferSubscriptionsWithHttpInfoAsync(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranslateBrowsePathsToNodeIdsResponse</returns>
        System.Threading.Tasks.Task<TranslateBrowsePathsToNodeIdsResponse> TranslateBrowsePathsToNodeIdsAsync(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranslateBrowsePathsToNodeIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranslateBrowsePathsToNodeIdsResponse>> TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterNodesResponse</returns>
        System.Threading.Tasks.Task<UnregisterNodesResponse> UnregisterNodesAsync(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnregisterNodesResponse>> UnregisterNodesWithHttpInfoAsync(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriteResponse</returns>
        System.Threading.Tasks.Task<WriteResponse> WriteAsync(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WriteResponse>> WriteWithHttpInfoAsync(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Opc.Ua.WebApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Opc.Ua.WebApi.Client.Configuration.MergeConfigurations(
                Opc.Ua.WebApi.Client.GlobalConfiguration.Instance,
                new Opc.Ua.WebApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Opc.Ua.WebApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opc.Ua.WebApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Opc.Ua.WebApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Opc.Ua.WebApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opc.Ua.WebApi.Client.Configuration.MergeConfigurations(
                Opc.Ua.WebApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Opc.Ua.WebApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opc.Ua.WebApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Opc.Ua.WebApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Opc.Ua.WebApi.Client.ISynchronousClient client, Opc.Ua.WebApi.Client.IAsynchronousClient asyncClient, Opc.Ua.WebApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opc.Ua.WebApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opc.Ua.WebApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opc.Ua.WebApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opc.Ua.WebApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opc.Ua.WebApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivateSessionResponse</returns>
        public ActivateSessionResponse ActivateSession(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<ActivateSessionResponse> localVarResponse = ActivateSessionWithHttpInfo(activateSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivateSessionResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<ActivateSessionResponse> ActivateSessionWithHttpInfo(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activateSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ActivateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ActivateSessionResponse>("/activatesession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivateSessionResponse</returns>
        public async System.Threading.Tasks.Task<ActivateSessionResponse> ActivateSessionAsync(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<ActivateSessionResponse> localVarResponse = await ActivateSessionWithHttpInfoAsync(activateSessionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequest">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<ActivateSessionResponse>> ActivateSessionWithHttpInfoAsync(ActivateSessionRequest? activateSessionRequest = default(ActivateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activateSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ActivateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActivateSessionResponse>("/activatesession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseResponse</returns>
        public BrowseResponse Browse(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<BrowseResponse> localVarResponse = BrowseWithHttpInfo(browseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<BrowseResponse> BrowseWithHttpInfo(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseRequest;

            localVarRequestOptions.Operation = "DefaultApi.Browse";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BrowseResponse>("/browse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseResponse</returns>
        public async System.Threading.Tasks.Task<BrowseResponse> BrowseAsync(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<BrowseResponse> localVarResponse = await BrowseWithHttpInfoAsync(browseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequest">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<BrowseResponse>> BrowseWithHttpInfoAsync(BrowseRequest? browseRequest = default(BrowseRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseRequest;

            localVarRequestOptions.Operation = "DefaultApi.Browse";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BrowseResponse>("/browse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseNextResponse</returns>
        public BrowseNextResponse BrowseNext(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<BrowseNextResponse> localVarResponse = BrowseNextWithHttpInfo(browseNextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseNextResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<BrowseNextResponse> BrowseNextWithHttpInfo(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseNextRequest;

            localVarRequestOptions.Operation = "DefaultApi.BrowseNext";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BrowseNextResponse>("/browsenext", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BrowseNext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseNextResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNextResponse> BrowseNextAsync(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<BrowseNextResponse> localVarResponse = await BrowseNextWithHttpInfoAsync(browseNextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequest">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseNextResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<BrowseNextResponse>> BrowseNextWithHttpInfoAsync(BrowseNextRequest? browseNextRequest = default(BrowseNextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseNextRequest;

            localVarRequestOptions.Operation = "DefaultApi.BrowseNext";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BrowseNextResponse>("/browsenext", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BrowseNext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallResponse</returns>
        public CallResponse Call(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CallResponse> localVarResponse = CallWithHttpInfo(callRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CallResponse> CallWithHttpInfo(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = callRequest;

            localVarRequestOptions.Operation = "DefaultApi.Call";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CallResponse>("/call", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Call", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResponse</returns>
        public async System.Threading.Tasks.Task<CallResponse> CallAsync(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CallResponse> localVarResponse = await CallWithHttpInfoAsync(callRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CallResponse>> CallWithHttpInfoAsync(CallRequest? callRequest = default(CallRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = callRequest;

            localVarRequestOptions.Operation = "DefaultApi.Call";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CallResponse>("/call", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Call", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelResponse</returns>
        public CancelResponse Cancel(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CancelResponse> localVarResponse = CancelWithHttpInfo(cancelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CancelResponse> CancelWithHttpInfo(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cancelRequest;

            localVarRequestOptions.Operation = "DefaultApi.Cancel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelResponse>("/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelResponse</returns>
        public async System.Threading.Tasks.Task<CancelResponse> CancelAsync(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CancelResponse> localVarResponse = await CancelWithHttpInfoAsync(cancelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequest">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CancelResponse>> CancelWithHttpInfoAsync(CancelRequest? cancelRequest = default(CancelRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cancelRequest;

            localVarRequestOptions.Operation = "DefaultApi.Cancel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelResponse>("/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloseSessionResponse</returns>
        public CloseSessionResponse CloseSession(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CloseSessionResponse> localVarResponse = CloseSessionWithHttpInfo(closeSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloseSessionResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CloseSessionResponse> CloseSessionWithHttpInfo(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = closeSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CloseSessionResponse>("/closesession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloseSessionResponse</returns>
        public async System.Threading.Tasks.Task<CloseSessionResponse> CloseSessionAsync(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CloseSessionResponse> localVarResponse = await CloseSessionWithHttpInfoAsync(closeSessionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequest">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloseSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CloseSessionResponse>> CloseSessionWithHttpInfoAsync(CloseSessionRequest? closeSessionRequest = default(CloseSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = closeSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloseSessionResponse>("/closesession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMonitoredItemsResponse</returns>
        public CreateMonitoredItemsResponse CreateMonitoredItems(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateMonitoredItemsResponse> localVarResponse = CreateMonitoredItemsWithHttpInfo(createMonitoredItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMonitoredItemsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CreateMonitoredItemsResponse> CreateMonitoredItemsWithHttpInfo(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMonitoredItemsResponse>("/createmonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMonitoredItemsResponse</returns>
        public async System.Threading.Tasks.Task<CreateMonitoredItemsResponse> CreateMonitoredItemsAsync(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateMonitoredItemsResponse> localVarResponse = await CreateMonitoredItemsWithHttpInfoAsync(createMonitoredItemsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequest">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMonitoredItemsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CreateMonitoredItemsResponse>> CreateMonitoredItemsWithHttpInfoAsync(CreateMonitoredItemsRequest? createMonitoredItemsRequest = default(CreateMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMonitoredItemsResponse>("/createmonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSessionResponse</returns>
        public CreateSessionResponse CreateSession(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateSessionResponse> localVarResponse = CreateSessionWithHttpInfo(createSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CreateSessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSessionResponse>("/createsession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateSessionResponse> localVarResponse = await CreateSessionWithHttpInfoAsync(createSessionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CreateSessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSessionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSessionResponse>("/createsession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubscriptionResponse</returns>
        public CreateSubscriptionResponse CreateSubscription(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateSubscriptionResponse> localVarResponse = CreateSubscriptionWithHttpInfo(createSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubscriptionResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<CreateSubscriptionResponse> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubscriptionResponse>("/createsubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubscriptionResponse> CreateSubscriptionAsync(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<CreateSubscriptionResponse> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(createSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<CreateSubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequest? createSubscriptionRequest = default(CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubscriptionResponse>("/createsubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMonitoredItemsResponse</returns>
        public DeleteMonitoredItemsResponse DeleteMonitoredItems(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<DeleteMonitoredItemsResponse> localVarResponse = DeleteMonitoredItemsWithHttpInfo(deleteMonitoredItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMonitoredItemsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<DeleteMonitoredItemsResponse> DeleteMonitoredItemsWithHttpInfo(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.DeleteMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteMonitoredItemsResponse>("/deletemonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMonitoredItemsResponse</returns>
        public async System.Threading.Tasks.Task<DeleteMonitoredItemsResponse> DeleteMonitoredItemsAsync(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<DeleteMonitoredItemsResponse> localVarResponse = await DeleteMonitoredItemsWithHttpInfoAsync(deleteMonitoredItemsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequest">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMonitoredItemsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<DeleteMonitoredItemsResponse>> DeleteMonitoredItemsWithHttpInfoAsync(DeleteMonitoredItemsRequest? deleteMonitoredItemsRequest = default(DeleteMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.DeleteMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteMonitoredItemsResponse>("/deletemonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSubscriptionsResponse</returns>
        public DeleteSubscriptionsResponse DeleteSubscriptions(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<DeleteSubscriptionsResponse> localVarResponse = DeleteSubscriptionsWithHttpInfo(deleteSubscriptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSubscriptionsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<DeleteSubscriptionsResponse> DeleteSubscriptionsWithHttpInfo(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSubscriptionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteSubscriptionsResponse>("/deletesubscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<DeleteSubscriptionsResponse> DeleteSubscriptionsAsync(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<DeleteSubscriptionsResponse> localVarResponse = await DeleteSubscriptionsWithHttpInfoAsync(deleteSubscriptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequest">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<DeleteSubscriptionsResponse>> DeleteSubscriptionsWithHttpInfoAsync(DeleteSubscriptionsRequest? deleteSubscriptionsRequest = default(DeleteSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSubscriptionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteSubscriptionsResponse>("/deletesubscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FindServersResponse</returns>
        public FindServersResponse FindServers(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<FindServersResponse> localVarResponse = FindServersWithHttpInfo(findServersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FindServersResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<FindServersResponse> FindServersWithHttpInfo(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findServersRequest;

            localVarRequestOptions.Operation = "DefaultApi.FindServers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindServersResponse>("/findservers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindServersResponse</returns>
        public async System.Threading.Tasks.Task<FindServersResponse> FindServersAsync(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<FindServersResponse> localVarResponse = await FindServersWithHttpInfoAsync(findServersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequest">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindServersResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<FindServersResponse>> FindServersWithHttpInfoAsync(FindServersRequest? findServersRequest = default(FindServersRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findServersRequest;

            localVarRequestOptions.Operation = "DefaultApi.FindServers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FindServersResponse>("/findservers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEndpointsResponse</returns>
        public GetEndpointsResponse GetEndpoints(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<GetEndpointsResponse> localVarResponse = GetEndpointsWithHttpInfo(getEndpointsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEndpointsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<GetEndpointsResponse> GetEndpointsWithHttpInfo(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEndpointsRequest;

            localVarRequestOptions.Operation = "DefaultApi.GetEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEndpointsResponse>("/getendpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEndpointsResponse</returns>
        public async System.Threading.Tasks.Task<GetEndpointsResponse> GetEndpointsAsync(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<GetEndpointsResponse> localVarResponse = await GetEndpointsWithHttpInfoAsync(getEndpointsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequest">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEndpointsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<GetEndpointsResponse>> GetEndpointsWithHttpInfoAsync(GetEndpointsRequest? getEndpointsRequest = default(GetEndpointsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEndpointsRequest;

            localVarRequestOptions.Operation = "DefaultApi.GetEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEndpointsResponse>("/getendpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryReadResponse</returns>
        public HistoryReadResponse HistoryRead(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<HistoryReadResponse> localVarResponse = HistoryReadWithHttpInfo(historyReadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryReadResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<HistoryReadResponse> HistoryReadWithHttpInfo(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyReadRequest;

            localVarRequestOptions.Operation = "DefaultApi.HistoryRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HistoryReadResponse>("/historyread", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryReadResponse</returns>
        public async System.Threading.Tasks.Task<HistoryReadResponse> HistoryReadAsync(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<HistoryReadResponse> localVarResponse = await HistoryReadWithHttpInfoAsync(historyReadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequest">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryReadResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<HistoryReadResponse>> HistoryReadWithHttpInfoAsync(HistoryReadRequest? historyReadRequest = default(HistoryReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyReadRequest;

            localVarRequestOptions.Operation = "DefaultApi.HistoryRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HistoryReadResponse>("/historyread", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryUpdateResponse</returns>
        public HistoryUpdateResponse HistoryUpdate(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<HistoryUpdateResponse> localVarResponse = HistoryUpdateWithHttpInfo(historyUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryUpdateResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<HistoryUpdateResponse> HistoryUpdateWithHttpInfo(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyUpdateRequest;

            localVarRequestOptions.Operation = "DefaultApi.HistoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HistoryUpdateResponse>("/historyupdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryUpdateResponse</returns>
        public async System.Threading.Tasks.Task<HistoryUpdateResponse> HistoryUpdateAsync(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<HistoryUpdateResponse> localVarResponse = await HistoryUpdateWithHttpInfoAsync(historyUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequest">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<HistoryUpdateResponse>> HistoryUpdateWithHttpInfoAsync(HistoryUpdateRequest? historyUpdateRequest = default(HistoryUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyUpdateRequest;

            localVarRequestOptions.Operation = "DefaultApi.HistoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HistoryUpdateResponse>("/historyupdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyMonitoredItemsResponse</returns>
        public ModifyMonitoredItemsResponse ModifyMonitoredItems(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<ModifyMonitoredItemsResponse> localVarResponse = ModifyMonitoredItemsWithHttpInfo(modifyMonitoredItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyMonitoredItemsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<ModifyMonitoredItemsResponse> ModifyMonitoredItemsWithHttpInfo(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifyMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ModifyMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModifyMonitoredItemsResponse>("/modifymonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyMonitoredItemsResponse</returns>
        public async System.Threading.Tasks.Task<ModifyMonitoredItemsResponse> ModifyMonitoredItemsAsync(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<ModifyMonitoredItemsResponse> localVarResponse = await ModifyMonitoredItemsWithHttpInfoAsync(modifyMonitoredItemsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequest">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyMonitoredItemsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<ModifyMonitoredItemsResponse>> ModifyMonitoredItemsWithHttpInfoAsync(ModifyMonitoredItemsRequest? modifyMonitoredItemsRequest = default(ModifyMonitoredItemsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifyMonitoredItemsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ModifyMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModifyMonitoredItemsResponse>("/modifymonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifySubscriptionResponse</returns>
        public ModifySubscriptionResponse ModifySubscription(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<ModifySubscriptionResponse> localVarResponse = ModifySubscriptionWithHttpInfo(modifySubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifySubscriptionResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<ModifySubscriptionResponse> ModifySubscriptionWithHttpInfo(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifySubscriptionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ModifySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModifySubscriptionResponse>("/modifysubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<ModifySubscriptionResponse> ModifySubscriptionAsync(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<ModifySubscriptionResponse> localVarResponse = await ModifySubscriptionWithHttpInfoAsync(modifySubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequest">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<ModifySubscriptionResponse>> ModifySubscriptionWithHttpInfoAsync(ModifySubscriptionRequest? modifySubscriptionRequest = default(ModifySubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifySubscriptionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ModifySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModifySubscriptionResponse>("/modifysubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishResponse</returns>
        public PublishResponse Publish(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<PublishResponse> localVarResponse = PublishWithHttpInfo(publishRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<PublishResponse> PublishWithHttpInfo(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publishRequest;

            localVarRequestOptions.Operation = "DefaultApi.Publish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PublishResponse>("/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Publish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishResponse</returns>
        public async System.Threading.Tasks.Task<PublishResponse> PublishAsync(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<PublishResponse> localVarResponse = await PublishWithHttpInfoAsync(publishRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequest">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<PublishResponse>> PublishWithHttpInfoAsync(PublishRequest? publishRequest = default(PublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publishRequest;

            localVarRequestOptions.Operation = "DefaultApi.Publish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublishResponse>("/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Publish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReadResponse</returns>
        public ReadResponse Read(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<ReadResponse> localVarResponse = ReadWithHttpInfo(readRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<ReadResponse> ReadWithHttpInfo(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readRequest;

            localVarRequestOptions.Operation = "DefaultApi.Read";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReadResponse>("/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Read", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadResponse</returns>
        public async System.Threading.Tasks.Task<ReadResponse> ReadAsync(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<ReadResponse> localVarResponse = await ReadWithHttpInfoAsync(readRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequest">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<ReadResponse>> ReadWithHttpInfoAsync(ReadRequest? readRequest = default(ReadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readRequest;

            localVarRequestOptions.Operation = "DefaultApi.Read";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReadResponse>("/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Read", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterNodesResponse</returns>
        public RegisterNodesResponse RegisterNodes(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<RegisterNodesResponse> localVarResponse = RegisterNodesWithHttpInfo(registerNodesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterNodesResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<RegisterNodesResponse> RegisterNodesWithHttpInfo(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.RegisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterNodesResponse>("/registernodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterNodesResponse</returns>
        public async System.Threading.Tasks.Task<RegisterNodesResponse> RegisterNodesAsync(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<RegisterNodesResponse> localVarResponse = await RegisterNodesWithHttpInfoAsync(registerNodesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequest">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterNodesResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<RegisterNodesResponse>> RegisterNodesWithHttpInfoAsync(RegisterNodesRequest? registerNodesRequest = default(RegisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.RegisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterNodesResponse>("/registernodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepublishResponse</returns>
        public RepublishResponse Republish(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<RepublishResponse> localVarResponse = RepublishWithHttpInfo(republishRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepublishResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<RepublishResponse> RepublishWithHttpInfo(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = republishRequest;

            localVarRequestOptions.Operation = "DefaultApi.Republish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RepublishResponse>("/republish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Republish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepublishResponse</returns>
        public async System.Threading.Tasks.Task<RepublishResponse> RepublishAsync(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<RepublishResponse> localVarResponse = await RepublishWithHttpInfoAsync(republishRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequest">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepublishResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<RepublishResponse>> RepublishWithHttpInfoAsync(RepublishRequest? republishRequest = default(RepublishRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = republishRequest;

            localVarRequestOptions.Operation = "DefaultApi.Republish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepublishResponse>("/republish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Republish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMonitoringModeResponse</returns>
        public SetMonitoringModeResponse SetMonitoringMode(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetMonitoringModeResponse> localVarResponse = SetMonitoringModeWithHttpInfo(setMonitoringModeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMonitoringModeResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<SetMonitoringModeResponse> SetMonitoringModeWithHttpInfo(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setMonitoringModeRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetMonitoringMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetMonitoringModeResponse>("/setmonitoringmode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMonitoringMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMonitoringModeResponse</returns>
        public async System.Threading.Tasks.Task<SetMonitoringModeResponse> SetMonitoringModeAsync(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetMonitoringModeResponse> localVarResponse = await SetMonitoringModeWithHttpInfoAsync(setMonitoringModeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequest">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMonitoringModeResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<SetMonitoringModeResponse>> SetMonitoringModeWithHttpInfoAsync(SetMonitoringModeRequest? setMonitoringModeRequest = default(SetMonitoringModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setMonitoringModeRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetMonitoringMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetMonitoringModeResponse>("/setmonitoringmode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMonitoringMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPublishingModeResponse</returns>
        public SetPublishingModeResponse SetPublishingMode(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetPublishingModeResponse> localVarResponse = SetPublishingModeWithHttpInfo(setPublishingModeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPublishingModeResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<SetPublishingModeResponse> SetPublishingModeWithHttpInfo(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPublishingModeRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetPublishingMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetPublishingModeResponse>("/setpublishingmode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPublishingMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPublishingModeResponse</returns>
        public async System.Threading.Tasks.Task<SetPublishingModeResponse> SetPublishingModeAsync(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetPublishingModeResponse> localVarResponse = await SetPublishingModeWithHttpInfoAsync(setPublishingModeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequest">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPublishingModeResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<SetPublishingModeResponse>> SetPublishingModeWithHttpInfoAsync(SetPublishingModeRequest? setPublishingModeRequest = default(SetPublishingModeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPublishingModeRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetPublishingMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetPublishingModeResponse>("/setpublishingmode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPublishingMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTriggeringResponse</returns>
        public SetTriggeringResponse SetTriggering(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetTriggeringResponse> localVarResponse = SetTriggeringWithHttpInfo(setTriggeringRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTriggeringResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<SetTriggeringResponse> SetTriggeringWithHttpInfo(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setTriggeringRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetTriggering";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetTriggeringResponse>("/settriggering", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTriggering", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTriggeringResponse</returns>
        public async System.Threading.Tasks.Task<SetTriggeringResponse> SetTriggeringAsync(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<SetTriggeringResponse> localVarResponse = await SetTriggeringWithHttpInfoAsync(setTriggeringRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequest">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTriggeringResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<SetTriggeringResponse>> SetTriggeringWithHttpInfoAsync(SetTriggeringRequest? setTriggeringRequest = default(SetTriggeringRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setTriggeringRequest;

            localVarRequestOptions.Operation = "DefaultApi.SetTriggering";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetTriggeringResponse>("/settriggering", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTriggering", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSubscriptionsResponse</returns>
        public TransferSubscriptionsResponse TransferSubscriptions(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<TransferSubscriptionsResponse> localVarResponse = TransferSubscriptionsWithHttpInfo(transferSubscriptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSubscriptionsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<TransferSubscriptionsResponse> TransferSubscriptionsWithHttpInfo(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSubscriptionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferSubscriptionsResponse>("/transfersubscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<TransferSubscriptionsResponse> TransferSubscriptionsAsync(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<TransferSubscriptionsResponse> localVarResponse = await TransferSubscriptionsWithHttpInfoAsync(transferSubscriptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequest">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<TransferSubscriptionsResponse>> TransferSubscriptionsWithHttpInfoAsync(TransferSubscriptionsRequest? transferSubscriptionsRequest = default(TransferSubscriptionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSubscriptionsRequest;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferSubscriptionsResponse>("/transfersubscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranslateBrowsePathsToNodeIdsResponse</returns>
        public TranslateBrowsePathsToNodeIdsResponse TranslateBrowsePathsToNodeIds(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponse> localVarResponse = TranslateBrowsePathsToNodeIdsWithHttpInfo(translateBrowsePathsToNodeIdsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranslateBrowsePathsToNodeIdsResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponse> TranslateBrowsePathsToNodeIdsWithHttpInfo(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = translateBrowsePathsToNodeIdsRequest;

            localVarRequestOptions.Operation = "DefaultApi.TranslateBrowsePathsToNodeIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TranslateBrowsePathsToNodeIdsResponse>("/translate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranslateBrowsePathsToNodeIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranslateBrowsePathsToNodeIdsResponse</returns>
        public async System.Threading.Tasks.Task<TranslateBrowsePathsToNodeIdsResponse> TranslateBrowsePathsToNodeIdsAsync(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponse> localVarResponse = await TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(translateBrowsePathsToNodeIdsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequest">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranslateBrowsePathsToNodeIdsResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponse>> TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(TranslateBrowsePathsToNodeIdsRequest? translateBrowsePathsToNodeIdsRequest = default(TranslateBrowsePathsToNodeIdsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = translateBrowsePathsToNodeIdsRequest;

            localVarRequestOptions.Operation = "DefaultApi.TranslateBrowsePathsToNodeIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TranslateBrowsePathsToNodeIdsResponse>("/translate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranslateBrowsePathsToNodeIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnregisterNodesResponse</returns>
        public UnregisterNodesResponse UnregisterNodes(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<UnregisterNodesResponse> localVarResponse = UnregisterNodesWithHttpInfo(unregisterNodesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnregisterNodesResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<UnregisterNodesResponse> UnregisterNodesWithHttpInfo(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unregisterNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.UnregisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UnregisterNodesResponse>("/unregisternodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterNodesResponse</returns>
        public async System.Threading.Tasks.Task<UnregisterNodesResponse> UnregisterNodesAsync(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<UnregisterNodesResponse> localVarResponse = await UnregisterNodesWithHttpInfoAsync(unregisterNodesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequest">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterNodesResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<UnregisterNodesResponse>> UnregisterNodesWithHttpInfoAsync(UnregisterNodesRequest? unregisterNodesRequest = default(UnregisterNodesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unregisterNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.UnregisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UnregisterNodesResponse>("/unregisternodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WriteResponse</returns>
        public WriteResponse Write(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.ApiResponse<WriteResponse> localVarResponse = WriteWithHttpInfo(writeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WriteResponse</returns>
        public Opc.Ua.WebApi.Client.ApiResponse<WriteResponse> WriteWithHttpInfo(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0)
        {
            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = writeRequest;

            localVarRequestOptions.Operation = "DefaultApi.Write";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WriteResponse>("/write", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Write", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriteResponse</returns>
        public async System.Threading.Tasks.Task<WriteResponse> WriteAsync(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opc.Ua.WebApi.Client.ApiResponse<WriteResponse> localVarResponse = await WriteWithHttpInfoAsync(writeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Opc.Ua.WebApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequest">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriteResponse)</returns>
        public async System.Threading.Tasks.Task<Opc.Ua.WebApi.Client.ApiResponse<WriteResponse>> WriteWithHttpInfoAsync(WriteRequest? writeRequest = default(WriteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opc.Ua.WebApi.Client.RequestOptions localVarRequestOptions = new Opc.Ua.WebApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opc.Ua.WebApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = writeRequest;

            localVarRequestOptions.Operation = "DefaultApi.Write";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WriteResponse>("/write", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Write", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
