/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// AggregateConfiguration
    /// </summary>
    [DataContract(Name = "AggregateConfiguration")]
    public partial class AggregateConfiguration : IEquatable<AggregateConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregateConfiguration" /> class.
        /// </summary>
        /// <param name="useServerCapabilitiesDefaults">useServerCapabilitiesDefaults.</param>
        /// <param name="treatUncertainAsBad">treatUncertainAsBad.</param>
        /// <param name="percentDataBad">percentDataBad.</param>
        /// <param name="percentDataGood">percentDataGood.</param>
        /// <param name="useSlopedExtrapolation">useSlopedExtrapolation.</param>
        public AggregateConfiguration(bool useServerCapabilitiesDefaults = default(bool), bool treatUncertainAsBad = default(bool), int percentDataBad = default(int), int percentDataGood = default(int), bool useSlopedExtrapolation = default(bool))
        {
            this.UseServerCapabilitiesDefaults = useServerCapabilitiesDefaults;
            this.TreatUncertainAsBad = treatUncertainAsBad;
            this.PercentDataBad = percentDataBad;
            this.PercentDataGood = percentDataGood;
            this.UseSlopedExtrapolation = useSlopedExtrapolation;
        }

        /// <summary>
        /// Gets or Sets UseServerCapabilitiesDefaults
        /// </summary>
        [DataMember(Name = "UseServerCapabilitiesDefaults", EmitDefaultValue = true)]
        public bool UseServerCapabilitiesDefaults { get; set; }

        /// <summary>
        /// Gets or Sets TreatUncertainAsBad
        /// </summary>
        [DataMember(Name = "TreatUncertainAsBad", EmitDefaultValue = true)]
        public bool TreatUncertainAsBad { get; set; }

        /// <summary>
        /// Gets or Sets PercentDataBad
        /// </summary>
        [DataMember(Name = "PercentDataBad", EmitDefaultValue = false)]
        public int PercentDataBad { get; set; }

        /// <summary>
        /// Gets or Sets PercentDataGood
        /// </summary>
        [DataMember(Name = "PercentDataGood", EmitDefaultValue = false)]
        public int PercentDataGood { get; set; }

        /// <summary>
        /// Gets or Sets UseSlopedExtrapolation
        /// </summary>
        [DataMember(Name = "UseSlopedExtrapolation", EmitDefaultValue = true)]
        public bool UseSlopedExtrapolation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregateConfiguration {\n");
            sb.Append("  UseServerCapabilitiesDefaults: ").Append(UseServerCapabilitiesDefaults).Append("\n");
            sb.Append("  TreatUncertainAsBad: ").Append(TreatUncertainAsBad).Append("\n");
            sb.Append("  PercentDataBad: ").Append(PercentDataBad).Append("\n");
            sb.Append("  PercentDataGood: ").Append(PercentDataGood).Append("\n");
            sb.Append("  UseSlopedExtrapolation: ").Append(UseSlopedExtrapolation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregateConfiguration);
        }

        /// <summary>
        /// Returns true if AggregateConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregateConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregateConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseServerCapabilitiesDefaults == input.UseServerCapabilitiesDefaults ||
                    this.UseServerCapabilitiesDefaults.Equals(input.UseServerCapabilitiesDefaults)
                ) && 
                (
                    this.TreatUncertainAsBad == input.TreatUncertainAsBad ||
                    this.TreatUncertainAsBad.Equals(input.TreatUncertainAsBad)
                ) && 
                (
                    this.PercentDataBad == input.PercentDataBad ||
                    this.PercentDataBad.Equals(input.PercentDataBad)
                ) && 
                (
                    this.PercentDataGood == input.PercentDataGood ||
                    this.PercentDataGood.Equals(input.PercentDataGood)
                ) && 
                (
                    this.UseSlopedExtrapolation == input.UseSlopedExtrapolation ||
                    this.UseSlopedExtrapolation.Equals(input.UseSlopedExtrapolation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseServerCapabilitiesDefaults.GetHashCode();
                hashCode = (hashCode * 59) + this.TreatUncertainAsBad.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentDataBad.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentDataGood.GetHashCode();
                hashCode = (hashCode * 59) + this.UseSlopedExtrapolation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PercentDataBad (int) maximum
            if (this.PercentDataBad > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentDataBad, must be a value less than or equal to 255.", new [] { "PercentDataBad" });
            }

            // PercentDataBad (int) minimum
            if (this.PercentDataBad < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentDataBad, must be a value greater than or equal to 0.", new [] { "PercentDataBad" });
            }

            // PercentDataGood (int) maximum
            if (this.PercentDataGood > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentDataGood, must be a value less than or equal to 255.", new [] { "PercentDataGood" });
            }

            // PercentDataGood (int) minimum
            if (this.PercentDataGood < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentDataGood, must be a value greater than or equal to 0.", new [] { "PercentDataGood" });
            }

            yield break;
        }
    }

}
