/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ApplicationDescription
    /// </summary>
    [DataContract(Name = "ApplicationDescription")]
    public partial class ApplicationDescription : IEquatable<ApplicationDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDescription" /> class.
        /// </summary>
        /// <param name="applicationUri">applicationUri.</param>
        /// <param name="productUri">productUri.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="applicationType">applicationType.</param>
        /// <param name="gatewayServerUri">gatewayServerUri.</param>
        /// <param name="discoveryProfileUri">discoveryProfileUri.</param>
        /// <param name="discoveryUrls">discoveryUrls.</param>
        public ApplicationDescription(string applicationUri = default(string), string productUri = default(string), LocalizedText applicationName = default(LocalizedText), int applicationType = default(int), string gatewayServerUri = default(string), string discoveryProfileUri = default(string), List<string> discoveryUrls = default(List<string>))
        {
            this.ApplicationUri = applicationUri;
            this.ProductUri = productUri;
            this.ApplicationName = applicationName;
            this.ApplicationType = applicationType;
            this.GatewayServerUri = gatewayServerUri;
            this.DiscoveryProfileUri = discoveryProfileUri;
            this.DiscoveryUrls = discoveryUrls;
        }

        /// <summary>
        /// Gets or Sets ApplicationUri
        /// </summary>
        [DataMember(Name = "ApplicationUri", EmitDefaultValue = false)]
        public string ApplicationUri { get; set; }

        /// <summary>
        /// Gets or Sets ProductUri
        /// </summary>
        [DataMember(Name = "ProductUri", EmitDefaultValue = false)]
        public string ProductUri { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "ApplicationName", EmitDefaultValue = false)]
        public LocalizedText ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationType
        /// </summary>
        [DataMember(Name = "ApplicationType", EmitDefaultValue = false)]
        public int ApplicationType { get; set; }

        /// <summary>
        /// Gets or Sets GatewayServerUri
        /// </summary>
        [DataMember(Name = "GatewayServerUri", EmitDefaultValue = false)]
        public string GatewayServerUri { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryProfileUri
        /// </summary>
        [DataMember(Name = "DiscoveryProfileUri", EmitDefaultValue = false)]
        public string DiscoveryProfileUri { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryUrls
        /// </summary>
        [DataMember(Name = "DiscoveryUrls", EmitDefaultValue = false)]
        public List<string> DiscoveryUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationDescription {\n");
            sb.Append("  ApplicationUri: ").Append(ApplicationUri).Append("\n");
            sb.Append("  ProductUri: ").Append(ProductUri).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
            sb.Append("  GatewayServerUri: ").Append(GatewayServerUri).Append("\n");
            sb.Append("  DiscoveryProfileUri: ").Append(DiscoveryProfileUri).Append("\n");
            sb.Append("  DiscoveryUrls: ").Append(DiscoveryUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationDescription);
        }

        /// <summary>
        /// Returns true if ApplicationDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationUri == input.ApplicationUri ||
                    (this.ApplicationUri != null &&
                    this.ApplicationUri.Equals(input.ApplicationUri))
                ) && 
                (
                    this.ProductUri == input.ProductUri ||
                    (this.ProductUri != null &&
                    this.ProductUri.Equals(input.ProductUri))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ApplicationType == input.ApplicationType ||
                    this.ApplicationType.Equals(input.ApplicationType)
                ) && 
                (
                    this.GatewayServerUri == input.GatewayServerUri ||
                    (this.GatewayServerUri != null &&
                    this.GatewayServerUri.Equals(input.GatewayServerUri))
                ) && 
                (
                    this.DiscoveryProfileUri == input.DiscoveryProfileUri ||
                    (this.DiscoveryProfileUri != null &&
                    this.DiscoveryProfileUri.Equals(input.DiscoveryProfileUri))
                ) && 
                (
                    this.DiscoveryUrls == input.DiscoveryUrls ||
                    this.DiscoveryUrls != null &&
                    input.DiscoveryUrls != null &&
                    this.DiscoveryUrls.SequenceEqual(input.DiscoveryUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationUri != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationUri.GetHashCode();
                }
                if (this.ProductUri != null)
                {
                    hashCode = (hashCode * 59) + this.ProductUri.GetHashCode();
                }
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApplicationType.GetHashCode();
                if (this.GatewayServerUri != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayServerUri.GetHashCode();
                }
                if (this.DiscoveryProfileUri != null)
                {
                    hashCode = (hashCode * 59) + this.DiscoveryProfileUri.GetHashCode();
                }
                if (this.DiscoveryUrls != null)
                {
                    hashCode = (hashCode * 59) + this.DiscoveryUrls.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
