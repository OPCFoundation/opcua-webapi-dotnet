/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// BrokerDataSetWriterTransportDataType
    /// </summary>
    [DataContract(Name = "BrokerDataSetWriterTransportDataType")]
    public partial class BrokerDataSetWriterTransportDataType : IEquatable<BrokerDataSetWriterTransportDataType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerDataSetWriterTransportDataType" /> class.
        /// </summary>
        /// <param name="queueName">queueName.</param>
        /// <param name="resourceUri">resourceUri.</param>
        /// <param name="authenticationProfileUri">authenticationProfileUri.</param>
        /// <param name="requestedDeliveryGuarantee">requestedDeliveryGuarantee.</param>
        /// <param name="metaDataQueueName">metaDataQueueName.</param>
        /// <param name="metaDataUpdateTime">metaDataUpdateTime.</param>
        public BrokerDataSetWriterTransportDataType(string queueName = default(string), string resourceUri = default(string), string authenticationProfileUri = default(string), int requestedDeliveryGuarantee = default(int), string metaDataQueueName = default(string), double metaDataUpdateTime = default(double))
        {
            this.QueueName = queueName;
            this.ResourceUri = resourceUri;
            this.AuthenticationProfileUri = authenticationProfileUri;
            this.RequestedDeliveryGuarantee = requestedDeliveryGuarantee;
            this.MetaDataQueueName = metaDataQueueName;
            this.MetaDataUpdateTime = metaDataUpdateTime;
        }

        /// <summary>
        /// Gets or Sets QueueName
        /// </summary>
        [DataMember(Name = "QueueName", EmitDefaultValue = false)]
        public string QueueName { get; set; }

        /// <summary>
        /// Gets or Sets ResourceUri
        /// </summary>
        [DataMember(Name = "ResourceUri", EmitDefaultValue = false)]
        public string ResourceUri { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationProfileUri
        /// </summary>
        [DataMember(Name = "AuthenticationProfileUri", EmitDefaultValue = false)]
        public string AuthenticationProfileUri { get; set; }

        /// <summary>
        /// Gets or Sets RequestedDeliveryGuarantee
        /// </summary>
        [DataMember(Name = "RequestedDeliveryGuarantee", EmitDefaultValue = false)]
        public int RequestedDeliveryGuarantee { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataQueueName
        /// </summary>
        [DataMember(Name = "MetaDataQueueName", EmitDefaultValue = false)]
        public string MetaDataQueueName { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataUpdateTime
        /// </summary>
        [DataMember(Name = "MetaDataUpdateTime", EmitDefaultValue = false)]
        public double MetaDataUpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrokerDataSetWriterTransportDataType {\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("  ResourceUri: ").Append(ResourceUri).Append("\n");
            sb.Append("  AuthenticationProfileUri: ").Append(AuthenticationProfileUri).Append("\n");
            sb.Append("  RequestedDeliveryGuarantee: ").Append(RequestedDeliveryGuarantee).Append("\n");
            sb.Append("  MetaDataQueueName: ").Append(MetaDataQueueName).Append("\n");
            sb.Append("  MetaDataUpdateTime: ").Append(MetaDataUpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrokerDataSetWriterTransportDataType);
        }

        /// <summary>
        /// Returns true if BrokerDataSetWriterTransportDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of BrokerDataSetWriterTransportDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrokerDataSetWriterTransportDataType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                ) && 
                (
                    this.ResourceUri == input.ResourceUri ||
                    (this.ResourceUri != null &&
                    this.ResourceUri.Equals(input.ResourceUri))
                ) && 
                (
                    this.AuthenticationProfileUri == input.AuthenticationProfileUri ||
                    (this.AuthenticationProfileUri != null &&
                    this.AuthenticationProfileUri.Equals(input.AuthenticationProfileUri))
                ) && 
                (
                    this.RequestedDeliveryGuarantee == input.RequestedDeliveryGuarantee ||
                    this.RequestedDeliveryGuarantee.Equals(input.RequestedDeliveryGuarantee)
                ) && 
                (
                    this.MetaDataQueueName == input.MetaDataQueueName ||
                    (this.MetaDataQueueName != null &&
                    this.MetaDataQueueName.Equals(input.MetaDataQueueName))
                ) && 
                (
                    this.MetaDataUpdateTime == input.MetaDataUpdateTime ||
                    this.MetaDataUpdateTime.Equals(input.MetaDataUpdateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueName != null)
                {
                    hashCode = (hashCode * 59) + this.QueueName.GetHashCode();
                }
                if (this.ResourceUri != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceUri.GetHashCode();
                }
                if (this.AuthenticationProfileUri != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationProfileUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestedDeliveryGuarantee.GetHashCode();
                if (this.MetaDataQueueName != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDataQueueName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MetaDataUpdateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
