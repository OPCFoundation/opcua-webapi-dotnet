/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// CreateSubscriptionResponse
    /// </summary>
    [DataContract(Name = "CreateSubscriptionResponse")]
    public partial class CreateSubscriptionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="subscriptionId">subscriptionId (default to 0).</param>
        /// <param name="revisedPublishingInterval">revisedPublishingInterval (default to 0D).</param>
        /// <param name="revisedLifetimeCount">revisedLifetimeCount (default to 0).</param>
        /// <param name="revisedMaxKeepAliveCount">revisedMaxKeepAliveCount (default to 0).</param>
        public CreateSubscriptionResponse(ResponseHeader responseHeader = default(ResponseHeader), long subscriptionId = 0, double revisedPublishingInterval = 0D, long revisedLifetimeCount = 0, long revisedMaxKeepAliveCount = 0)
        {
            this.ResponseHeader = responseHeader;
            this.SubscriptionId = subscriptionId;
            this.RevisedPublishingInterval = revisedPublishingInterval;
            this.RevisedLifetimeCount = revisedLifetimeCount;
            this.RevisedMaxKeepAliveCount = revisedMaxKeepAliveCount;
        }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name = "ResponseHeader", EmitDefaultValue = false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "SubscriptionId", EmitDefaultValue = false)]
        public long SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets RevisedPublishingInterval
        /// </summary>
        [DataMember(Name = "RevisedPublishingInterval", EmitDefaultValue = false)]
        public double RevisedPublishingInterval { get; set; }

        /// <summary>
        /// Gets or Sets RevisedLifetimeCount
        /// </summary>
        [DataMember(Name = "RevisedLifetimeCount", EmitDefaultValue = false)]
        public long RevisedLifetimeCount { get; set; }

        /// <summary>
        /// Gets or Sets RevisedMaxKeepAliveCount
        /// </summary>
        [DataMember(Name = "RevisedMaxKeepAliveCount", EmitDefaultValue = false)]
        public long RevisedMaxKeepAliveCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubscriptionResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  RevisedPublishingInterval: ").Append(RevisedPublishingInterval).Append("\n");
            sb.Append("  RevisedLifetimeCount: ").Append(RevisedLifetimeCount).Append("\n");
            sb.Append("  RevisedMaxKeepAliveCount: ").Append(RevisedMaxKeepAliveCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SubscriptionId (long) maximum
            if (this.SubscriptionId > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for SubscriptionId, must be a value less than or equal to 4294967295.", new [] { "SubscriptionId" });
            }

            // SubscriptionId (long) minimum
            if (this.SubscriptionId < (long)0)
            {
                yield return new ValidationResult("Invalid value for SubscriptionId, must be a value greater than or equal to 0.", new [] { "SubscriptionId" });
            }

            // RevisedLifetimeCount (long) maximum
            if (this.RevisedLifetimeCount > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for RevisedLifetimeCount, must be a value less than or equal to 4294967295.", new [] { "RevisedLifetimeCount" });
            }

            // RevisedLifetimeCount (long) minimum
            if (this.RevisedLifetimeCount < (long)0)
            {
                yield return new ValidationResult("Invalid value for RevisedLifetimeCount, must be a value greater than or equal to 0.", new [] { "RevisedLifetimeCount" });
            }

            // RevisedMaxKeepAliveCount (long) maximum
            if (this.RevisedMaxKeepAliveCount > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for RevisedMaxKeepAliveCount, must be a value less than or equal to 4294967295.", new [] { "RevisedMaxKeepAliveCount" });
            }

            // RevisedMaxKeepAliveCount (long) minimum
            if (this.RevisedMaxKeepAliveCount < (long)0)
            {
                yield return new ValidationResult("Invalid value for RevisedMaxKeepAliveCount, must be a value greater than or equal to 0.", new [] { "RevisedMaxKeepAliveCount" });
            }

            yield break;
        }
    }

}
