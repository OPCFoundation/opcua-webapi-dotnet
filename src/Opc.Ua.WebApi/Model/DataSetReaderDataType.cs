/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// DataSetReaderDataType
    /// </summary>
    [DataContract(Name = "DataSetReaderDataType")]
    public partial class DataSetReaderDataType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSetReaderDataType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="enabled">enabled (default to false).</param>
        /// <param name="publisherId">publisherId.</param>
        /// <param name="writerGroupId">writerGroupId (default to 0).</param>
        /// <param name="dataSetWriterId">dataSetWriterId (default to 0).</param>
        /// <param name="dataSetMetaData">dataSetMetaData.</param>
        /// <param name="dataSetFieldContentMask">dataSetFieldContentMask (default to 0).</param>
        /// <param name="messageReceiveTimeout">messageReceiveTimeout (default to 0D).</param>
        /// <param name="keyFrameCount">keyFrameCount (default to 0).</param>
        /// <param name="headerLayoutUri">headerLayoutUri.</param>
        /// <param name="securityMode">securityMode.</param>
        /// <param name="securityGroupId">securityGroupId.</param>
        /// <param name="securityKeyServices">securityKeyServices.</param>
        /// <param name="dataSetReaderProperties">dataSetReaderProperties.</param>
        /// <param name="transportSettings">transportSettings.</param>
        /// <param name="messageSettings">messageSettings.</param>
        /// <param name="subscribedDataSet">subscribedDataSet.</param>
        public DataSetReaderDataType(string name = default(string), bool enabled = false, Variant publisherId = default(Variant), int writerGroupId = 0, int dataSetWriterId = 0, DataSetMetaDataType dataSetMetaData = default(DataSetMetaDataType), long dataSetFieldContentMask = 0, double messageReceiveTimeout = 0D, long keyFrameCount = 0, string headerLayoutUri = default(string), int securityMode = default(int), string securityGroupId = default(string), List<EndpointDescription> securityKeyServices = default(List<EndpointDescription>), List<KeyValuePair> dataSetReaderProperties = default(List<KeyValuePair>), ExtensionObject transportSettings = default(ExtensionObject), ExtensionObject messageSettings = default(ExtensionObject), ExtensionObject subscribedDataSet = default(ExtensionObject))
        {
            this.Name = name;
            this.Enabled = enabled;
            this.PublisherId = publisherId;
            this.WriterGroupId = writerGroupId;
            this.DataSetWriterId = dataSetWriterId;
            this.DataSetMetaData = dataSetMetaData;
            this.DataSetFieldContentMask = dataSetFieldContentMask;
            this.MessageReceiveTimeout = messageReceiveTimeout;
            this.KeyFrameCount = keyFrameCount;
            this.HeaderLayoutUri = headerLayoutUri;
            this.SecurityMode = securityMode;
            this.SecurityGroupId = securityGroupId;
            this.SecurityKeyServices = securityKeyServices;
            this.DataSetReaderProperties = dataSetReaderProperties;
            this.TransportSettings = transportSettings;
            this.MessageSettings = messageSettings;
            this.SubscribedDataSet = subscribedDataSet;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets PublisherId
        /// </summary>
        [DataMember(Name = "PublisherId", EmitDefaultValue = false)]
        public Variant PublisherId { get; set; }

        /// <summary>
        /// Gets or Sets WriterGroupId
        /// </summary>
        [DataMember(Name = "WriterGroupId", EmitDefaultValue = false)]
        public int WriterGroupId { get; set; }

        /// <summary>
        /// Gets or Sets DataSetWriterId
        /// </summary>
        [DataMember(Name = "DataSetWriterId", EmitDefaultValue = false)]
        public int DataSetWriterId { get; set; }

        /// <summary>
        /// Gets or Sets DataSetMetaData
        /// </summary>
        [DataMember(Name = "DataSetMetaData", EmitDefaultValue = false)]
        public DataSetMetaDataType DataSetMetaData { get; set; }

        /// <summary>
        /// Gets or Sets DataSetFieldContentMask
        /// </summary>
        [DataMember(Name = "DataSetFieldContentMask", EmitDefaultValue = false)]
        public long DataSetFieldContentMask { get; set; }

        /// <summary>
        /// Gets or Sets MessageReceiveTimeout
        /// </summary>
        [DataMember(Name = "MessageReceiveTimeout", EmitDefaultValue = false)]
        public double MessageReceiveTimeout { get; set; }

        /// <summary>
        /// Gets or Sets KeyFrameCount
        /// </summary>
        [DataMember(Name = "KeyFrameCount", EmitDefaultValue = false)]
        public long KeyFrameCount { get; set; }

        /// <summary>
        /// Gets or Sets HeaderLayoutUri
        /// </summary>
        [DataMember(Name = "HeaderLayoutUri", EmitDefaultValue = false)]
        public string HeaderLayoutUri { get; set; }

        /// <summary>
        /// Gets or Sets SecurityMode
        /// </summary>
        [DataMember(Name = "SecurityMode", EmitDefaultValue = false)]
        public int SecurityMode { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroupId
        /// </summary>
        [DataMember(Name = "SecurityGroupId", EmitDefaultValue = false)]
        public string SecurityGroupId { get; set; }

        /// <summary>
        /// Gets or Sets SecurityKeyServices
        /// </summary>
        [DataMember(Name = "SecurityKeyServices", EmitDefaultValue = false)]
        public List<EndpointDescription> SecurityKeyServices { get; set; }

        /// <summary>
        /// Gets or Sets DataSetReaderProperties
        /// </summary>
        [DataMember(Name = "DataSetReaderProperties", EmitDefaultValue = false)]
        public List<KeyValuePair> DataSetReaderProperties { get; set; }

        /// <summary>
        /// Gets or Sets TransportSettings
        /// </summary>
        [DataMember(Name = "TransportSettings", EmitDefaultValue = false)]
        public ExtensionObject TransportSettings { get; set; }

        /// <summary>
        /// Gets or Sets MessageSettings
        /// </summary>
        [DataMember(Name = "MessageSettings", EmitDefaultValue = false)]
        public ExtensionObject MessageSettings { get; set; }

        /// <summary>
        /// Gets or Sets SubscribedDataSet
        /// </summary>
        [DataMember(Name = "SubscribedDataSet", EmitDefaultValue = false)]
        public ExtensionObject SubscribedDataSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSetReaderDataType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  PublisherId: ").Append(PublisherId).Append("\n");
            sb.Append("  WriterGroupId: ").Append(WriterGroupId).Append("\n");
            sb.Append("  DataSetWriterId: ").Append(DataSetWriterId).Append("\n");
            sb.Append("  DataSetMetaData: ").Append(DataSetMetaData).Append("\n");
            sb.Append("  DataSetFieldContentMask: ").Append(DataSetFieldContentMask).Append("\n");
            sb.Append("  MessageReceiveTimeout: ").Append(MessageReceiveTimeout).Append("\n");
            sb.Append("  KeyFrameCount: ").Append(KeyFrameCount).Append("\n");
            sb.Append("  HeaderLayoutUri: ").Append(HeaderLayoutUri).Append("\n");
            sb.Append("  SecurityMode: ").Append(SecurityMode).Append("\n");
            sb.Append("  SecurityGroupId: ").Append(SecurityGroupId).Append("\n");
            sb.Append("  SecurityKeyServices: ").Append(SecurityKeyServices).Append("\n");
            sb.Append("  DataSetReaderProperties: ").Append(DataSetReaderProperties).Append("\n");
            sb.Append("  TransportSettings: ").Append(TransportSettings).Append("\n");
            sb.Append("  MessageSettings: ").Append(MessageSettings).Append("\n");
            sb.Append("  SubscribedDataSet: ").Append(SubscribedDataSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WriterGroupId (int) maximum
            if (this.WriterGroupId > (int)65535)
            {
                yield return new ValidationResult("Invalid value for WriterGroupId, must be a value less than or equal to 65535.", new [] { "WriterGroupId" });
            }

            // WriterGroupId (int) minimum
            if (this.WriterGroupId < (int)0)
            {
                yield return new ValidationResult("Invalid value for WriterGroupId, must be a value greater than or equal to 0.", new [] { "WriterGroupId" });
            }

            // DataSetWriterId (int) maximum
            if (this.DataSetWriterId > (int)65535)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value less than or equal to 65535.", new [] { "DataSetWriterId" });
            }

            // DataSetWriterId (int) minimum
            if (this.DataSetWriterId < (int)0)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value greater than or equal to 0.", new [] { "DataSetWriterId" });
            }

            // DataSetFieldContentMask (long) maximum
            if (this.DataSetFieldContentMask > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for DataSetFieldContentMask, must be a value less than or equal to 4294967295.", new [] { "DataSetFieldContentMask" });
            }

            // DataSetFieldContentMask (long) minimum
            if (this.DataSetFieldContentMask < (long)0)
            {
                yield return new ValidationResult("Invalid value for DataSetFieldContentMask, must be a value greater than or equal to 0.", new [] { "DataSetFieldContentMask" });
            }

            // KeyFrameCount (long) maximum
            if (this.KeyFrameCount > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for KeyFrameCount, must be a value less than or equal to 4294967295.", new [] { "KeyFrameCount" });
            }

            // KeyFrameCount (long) minimum
            if (this.KeyFrameCount < (long)0)
            {
                yield return new ValidationResult("Invalid value for KeyFrameCount, must be a value greater than or equal to 0.", new [] { "KeyFrameCount" });
            }

            yield break;
        }
    }

}
