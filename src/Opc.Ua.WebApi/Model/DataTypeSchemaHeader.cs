/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// DataTypeSchemaHeader
    /// </summary>
    [DataContract(Name = "DataTypeSchemaHeader")]
    public partial class DataTypeSchemaHeader : IEquatable<DataTypeSchemaHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTypeSchemaHeader" /> class.
        /// </summary>
        /// <param name="namespaces">namespaces.</param>
        /// <param name="structureDataTypes">structureDataTypes.</param>
        /// <param name="enumDataTypes">enumDataTypes.</param>
        /// <param name="simpleDataTypes">simpleDataTypes.</param>
        public DataTypeSchemaHeader(List<string> namespaces = default(List<string>), List<StructureDescription> structureDataTypes = default(List<StructureDescription>), List<EnumDescription> enumDataTypes = default(List<EnumDescription>), List<SimpleTypeDescription> simpleDataTypes = default(List<SimpleTypeDescription>))
        {
            this.Namespaces = namespaces;
            this.StructureDataTypes = structureDataTypes;
            this.EnumDataTypes = enumDataTypes;
            this.SimpleDataTypes = simpleDataTypes;
        }

        /// <summary>
        /// Gets or Sets Namespaces
        /// </summary>
        [DataMember(Name = "Namespaces", EmitDefaultValue = false)]
        public List<string> Namespaces { get; set; }

        /// <summary>
        /// Gets or Sets StructureDataTypes
        /// </summary>
        [DataMember(Name = "StructureDataTypes", EmitDefaultValue = false)]
        public List<StructureDescription> StructureDataTypes { get; set; }

        /// <summary>
        /// Gets or Sets EnumDataTypes
        /// </summary>
        [DataMember(Name = "EnumDataTypes", EmitDefaultValue = false)]
        public List<EnumDescription> EnumDataTypes { get; set; }

        /// <summary>
        /// Gets or Sets SimpleDataTypes
        /// </summary>
        [DataMember(Name = "SimpleDataTypes", EmitDefaultValue = false)]
        public List<SimpleTypeDescription> SimpleDataTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataTypeSchemaHeader {\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("  StructureDataTypes: ").Append(StructureDataTypes).Append("\n");
            sb.Append("  EnumDataTypes: ").Append(EnumDataTypes).Append("\n");
            sb.Append("  SimpleDataTypes: ").Append(SimpleDataTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataTypeSchemaHeader);
        }

        /// <summary>
        /// Returns true if DataTypeSchemaHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of DataTypeSchemaHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataTypeSchemaHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Namespaces == input.Namespaces ||
                    this.Namespaces != null &&
                    input.Namespaces != null &&
                    this.Namespaces.SequenceEqual(input.Namespaces)
                ) && 
                (
                    this.StructureDataTypes == input.StructureDataTypes ||
                    this.StructureDataTypes != null &&
                    input.StructureDataTypes != null &&
                    this.StructureDataTypes.SequenceEqual(input.StructureDataTypes)
                ) && 
                (
                    this.EnumDataTypes == input.EnumDataTypes ||
                    this.EnumDataTypes != null &&
                    input.EnumDataTypes != null &&
                    this.EnumDataTypes.SequenceEqual(input.EnumDataTypes)
                ) && 
                (
                    this.SimpleDataTypes == input.SimpleDataTypes ||
                    this.SimpleDataTypes != null &&
                    input.SimpleDataTypes != null &&
                    this.SimpleDataTypes.SequenceEqual(input.SimpleDataTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Namespaces != null)
                {
                    hashCode = (hashCode * 59) + this.Namespaces.GetHashCode();
                }
                if (this.StructureDataTypes != null)
                {
                    hashCode = (hashCode * 59) + this.StructureDataTypes.GetHashCode();
                }
                if (this.EnumDataTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EnumDataTypes.GetHashCode();
                }
                if (this.SimpleDataTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SimpleDataTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
