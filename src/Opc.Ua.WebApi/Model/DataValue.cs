/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/Core/Part6/v105/docs/5.4.2.18).
    /// </summary>
    [DataContract(Name = "DataValue")]
    public partial class DataValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataValue" /> class.
        /// </summary>
        /// <param name="uaType">uaType (default to 0).</param>
        /// <param name="value">value.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="statusCode">statusCode.</param>
        /// <param name="sourceTimestamp">sourceTimestamp.</param>
        /// <param name="sourcePicoseconds">sourcePicoseconds.</param>
        /// <param name="serverTimestamp">serverTimestamp.</param>
        /// <param name="serverPicoseconds">serverPicoseconds.</param>
        public DataValue(int uaType = 0, Object value = default(Object), List<int> dimensions = default(List<int>), StatusCode statusCode = default(StatusCode), DateTime sourceTimestamp = default(DateTime), int sourcePicoseconds = default(int), DateTime serverTimestamp = default(DateTime), int serverPicoseconds = default(int))
        {
            this.UaType = uaType;
            this.Value = value;
            this.Dimensions = dimensions;
            this.StatusCode = statusCode;
            this.SourceTimestamp = sourceTimestamp;
            this.SourcePicoseconds = sourcePicoseconds;
            this.ServerTimestamp = serverTimestamp;
            this.ServerPicoseconds = serverPicoseconds;
        }

        /// <summary>
        /// Gets or Sets UaType
        /// </summary>
        [DataMember(Name = "UaType", EmitDefaultValue = false)]
        public int UaType { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "Value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "Dimensions", EmitDefaultValue = false)]
        public List<int> Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "StatusCode", EmitDefaultValue = false)]
        public StatusCode StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets SourceTimestamp
        /// </summary>
        [DataMember(Name = "SourceTimestamp", EmitDefaultValue = false)]
        public DateTime SourceTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets SourcePicoseconds
        /// </summary>
        [DataMember(Name = "SourcePicoseconds", EmitDefaultValue = false)]
        public int SourcePicoseconds { get; set; }

        /// <summary>
        /// Gets or Sets ServerTimestamp
        /// </summary>
        [DataMember(Name = "ServerTimestamp", EmitDefaultValue = false)]
        public DateTime ServerTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ServerPicoseconds
        /// </summary>
        [DataMember(Name = "ServerPicoseconds", EmitDefaultValue = false)]
        public int ServerPicoseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataValue {\n");
            sb.Append("  UaType: ").Append(UaType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  SourceTimestamp: ").Append(SourceTimestamp).Append("\n");
            sb.Append("  SourcePicoseconds: ").Append(SourcePicoseconds).Append("\n");
            sb.Append("  ServerTimestamp: ").Append(ServerTimestamp).Append("\n");
            sb.Append("  ServerPicoseconds: ").Append(ServerPicoseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UaType (int) maximum
            if (this.UaType > (int)255)
            {
                yield return new ValidationResult("Invalid value for UaType, must be a value less than or equal to 255.", new [] { "UaType" });
            }

            // UaType (int) minimum
            if (this.UaType < (int)0)
            {
                yield return new ValidationResult("Invalid value for UaType, must be a value greater than or equal to 0.", new [] { "UaType" });
            }

            // SourcePicoseconds (int) maximum
            if (this.SourcePicoseconds > (int)65535)
            {
                yield return new ValidationResult("Invalid value for SourcePicoseconds, must be a value less than or equal to 65535.", new [] { "SourcePicoseconds" });
            }

            // SourcePicoseconds (int) minimum
            if (this.SourcePicoseconds < (int)0)
            {
                yield return new ValidationResult("Invalid value for SourcePicoseconds, must be a value greater than or equal to 0.", new [] { "SourcePicoseconds" });
            }

            // ServerPicoseconds (int) maximum
            if (this.ServerPicoseconds > (int)65535)
            {
                yield return new ValidationResult("Invalid value for ServerPicoseconds, must be a value less than or equal to 65535.", new [] { "ServerPicoseconds" });
            }

            // ServerPicoseconds (int) minimum
            if (this.ServerPicoseconds < (int)0)
            {
                yield return new ValidationResult("Invalid value for ServerPicoseconds, must be a value greater than or equal to 0.", new [] { "ServerPicoseconds" });
            }

            yield break;
        }
    }

}
