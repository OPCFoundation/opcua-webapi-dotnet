/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/Core/Part4/v105/docs/7.12).
    /// </summary>
    [DataContract(Name = "DiagnosticInfo")]
    public partial class DiagnosticInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticInfo" /> class.
        /// </summary>
        /// <param name="symbolicId">symbolicId.</param>
        /// <param name="namespaceUri">namespaceUri.</param>
        /// <param name="locale">locale.</param>
        /// <param name="localizedText">localizedText.</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        /// <param name="innerStatusCode">innerStatusCode.</param>
        /// <param name="innerDiagnosticInfo">innerDiagnosticInfo.</param>
        public DiagnosticInfo(int symbolicId = default(int), int namespaceUri = default(int), int locale = default(int), int localizedText = default(int), string additionalInfo = default(string), StatusCode innerStatusCode = default(StatusCode), DiagnosticInfo innerDiagnosticInfo = default(DiagnosticInfo))
        {
            this.SymbolicId = symbolicId;
            this.NamespaceUri = namespaceUri;
            this.Locale = locale;
            this.LocalizedText = localizedText;
            this.AdditionalInfo = additionalInfo;
            this.InnerStatusCode = innerStatusCode;
            this.InnerDiagnosticInfo = innerDiagnosticInfo;
        }

        /// <summary>
        /// Gets or Sets SymbolicId
        /// </summary>
        [DataMember(Name = "SymbolicId", EmitDefaultValue = false)]
        public int SymbolicId { get; set; }

        /// <summary>
        /// Gets or Sets NamespaceUri
        /// </summary>
        [DataMember(Name = "NamespaceUri", EmitDefaultValue = false)]
        public int NamespaceUri { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "Locale", EmitDefaultValue = false)]
        public int Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedText
        /// </summary>
        [DataMember(Name = "LocalizedText", EmitDefaultValue = false)]
        public int LocalizedText { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name = "AdditionalInfo", EmitDefaultValue = false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Gets or Sets InnerStatusCode
        /// </summary>
        [DataMember(Name = "InnerStatusCode", EmitDefaultValue = false)]
        public StatusCode InnerStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets InnerDiagnosticInfo
        /// </summary>
        [DataMember(Name = "InnerDiagnosticInfo", EmitDefaultValue = false)]
        public DiagnosticInfo InnerDiagnosticInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagnosticInfo {\n");
            sb.Append("  SymbolicId: ").Append(SymbolicId).Append("\n");
            sb.Append("  NamespaceUri: ").Append(NamespaceUri).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocalizedText: ").Append(LocalizedText).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  InnerStatusCode: ").Append(InnerStatusCode).Append("\n");
            sb.Append("  InnerDiagnosticInfo: ").Append(InnerDiagnosticInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
