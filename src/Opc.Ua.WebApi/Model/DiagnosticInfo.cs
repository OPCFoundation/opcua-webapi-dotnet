/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// DiagnosticInfo
    /// </summary>
    [DataContract(Name = "DiagnosticInfo")]
    public partial class DiagnosticInfo : IEquatable<DiagnosticInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticInfo" /> class.
        /// </summary>
        /// <param name="symbolicId">symbolicId.</param>
        /// <param name="namespaceUri">namespaceUri.</param>
        /// <param name="locale">locale.</param>
        /// <param name="localizedText">localizedText.</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        /// <param name="innerStatusCode">innerStatusCode.</param>
        /// <param name="innerDiagnosticInfo">innerDiagnosticInfo.</param>
        public DiagnosticInfo(int symbolicId = default(int), int namespaceUri = default(int), int locale = default(int), int localizedText = default(int), string additionalInfo = default(string), long innerStatusCode = default(long), DiagnosticInfo innerDiagnosticInfo = default(DiagnosticInfo))
        {
            this.SymbolicId = symbolicId;
            this.NamespaceUri = namespaceUri;
            this.Locale = locale;
            this.LocalizedText = localizedText;
            this.AdditionalInfo = additionalInfo;
            this.InnerStatusCode = innerStatusCode;
            this.InnerDiagnosticInfo = innerDiagnosticInfo;
        }

        /// <summary>
        /// Gets or Sets SymbolicId
        /// </summary>
        [DataMember(Name = "SymbolicId", EmitDefaultValue = false)]
        public int SymbolicId { get; set; }

        /// <summary>
        /// Gets or Sets NamespaceUri
        /// </summary>
        [DataMember(Name = "NamespaceUri", EmitDefaultValue = false)]
        public int NamespaceUri { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "Locale", EmitDefaultValue = false)]
        public int Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedText
        /// </summary>
        [DataMember(Name = "LocalizedText", EmitDefaultValue = false)]
        public int LocalizedText { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name = "AdditionalInfo", EmitDefaultValue = false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Gets or Sets InnerStatusCode
        /// </summary>
        [DataMember(Name = "InnerStatusCode", EmitDefaultValue = false)]
        public long InnerStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets InnerDiagnosticInfo
        /// </summary>
        [DataMember(Name = "InnerDiagnosticInfo", EmitDefaultValue = false)]
        public DiagnosticInfo InnerDiagnosticInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagnosticInfo {\n");
            sb.Append("  SymbolicId: ").Append(SymbolicId).Append("\n");
            sb.Append("  NamespaceUri: ").Append(NamespaceUri).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocalizedText: ").Append(LocalizedText).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  InnerStatusCode: ").Append(InnerStatusCode).Append("\n");
            sb.Append("  InnerDiagnosticInfo: ").Append(InnerDiagnosticInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagnosticInfo);
        }

        /// <summary>
        /// Returns true if DiagnosticInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagnosticInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagnosticInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SymbolicId == input.SymbolicId ||
                    this.SymbolicId.Equals(input.SymbolicId)
                ) && 
                (
                    this.NamespaceUri == input.NamespaceUri ||
                    this.NamespaceUri.Equals(input.NamespaceUri)
                ) && 
                (
                    this.Locale == input.Locale ||
                    this.Locale.Equals(input.Locale)
                ) && 
                (
                    this.LocalizedText == input.LocalizedText ||
                    this.LocalizedText.Equals(input.LocalizedText)
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.InnerStatusCode == input.InnerStatusCode ||
                    this.InnerStatusCode.Equals(input.InnerStatusCode)
                ) && 
                (
                    this.InnerDiagnosticInfo == input.InnerDiagnosticInfo ||
                    (this.InnerDiagnosticInfo != null &&
                    this.InnerDiagnosticInfo.Equals(input.InnerDiagnosticInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SymbolicId.GetHashCode();
                hashCode = (hashCode * 59) + this.NamespaceUri.GetHashCode();
                hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalizedText.GetHashCode();
                if (this.AdditionalInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InnerStatusCode.GetHashCode();
                if (this.InnerDiagnosticInfo != null)
                {
                    hashCode = (hashCode * 59) + this.InnerDiagnosticInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InnerStatusCode (long) maximum
            if (this.InnerStatusCode > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InnerStatusCode, must be a value less than or equal to 4294967295.", new [] { "InnerStatusCode" });
            }

            // InnerStatusCode (long) minimum
            if (this.InnerStatusCode < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InnerStatusCode, must be a value greater than or equal to 0.", new [] { "InnerStatusCode" });
            }

            yield break;
        }
    }

}
