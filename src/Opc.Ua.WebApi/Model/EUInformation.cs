/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// EUInformation
    /// </summary>
    [DataContract(Name = "EUInformation")]
    public partial class EUInformation : IEquatable<EUInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EUInformation" /> class.
        /// </summary>
        /// <param name="namespaceUri">namespaceUri.</param>
        /// <param name="unitId">unitId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">description.</param>
        public EUInformation(string namespaceUri = default(string), int unitId = default(int), LocalizedText displayName = default(LocalizedText), LocalizedText description = default(LocalizedText))
        {
            this.NamespaceUri = namespaceUri;
            this.UnitId = unitId;
            this.DisplayName = displayName;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets NamespaceUri
        /// </summary>
        [DataMember(Name = "NamespaceUri", EmitDefaultValue = false)]
        public string NamespaceUri { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name = "UnitId", EmitDefaultValue = false)]
        public int UnitId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "DisplayName", EmitDefaultValue = false)]
        public LocalizedText DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public LocalizedText Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EUInformation {\n");
            sb.Append("  NamespaceUri: ").Append(NamespaceUri).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EUInformation);
        }

        /// <summary>
        /// Returns true if EUInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of EUInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EUInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NamespaceUri == input.NamespaceUri ||
                    (this.NamespaceUri != null &&
                    this.NamespaceUri.Equals(input.NamespaceUri))
                ) && 
                (
                    this.UnitId == input.UnitId ||
                    this.UnitId.Equals(input.UnitId)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NamespaceUri != null)
                {
                    hashCode = (hashCode * 59) + this.NamespaceUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitId.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
