/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.14).
    /// </summary>
    [DataContract(Name = "EndpointDescription")]
    public partial class EndpointDescription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointDescription" /> class.
        /// </summary>
        /// <param name="endpointUrl">endpointUrl.</param>
        /// <param name="server">server.</param>
        /// <param name="serverCertificate">serverCertificate.</param>
        /// <param name="securityMode">[Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.3.10)..</param>
        /// <param name="securityPolicyUri">securityPolicyUri.</param>
        /// <param name="userIdentityTokens">userIdentityTokens.</param>
        /// <param name="transportProfileUri">transportProfileUri.</param>
        /// <param name="securityLevel">securityLevel (default to 0).</param>
        public EndpointDescription(string endpointUrl = default(string), ApplicationDescription server = default(ApplicationDescription), byte[] serverCertificate = default(byte[]), int securityMode = default(int), string securityPolicyUri = default(string), List<UserTokenPolicy> userIdentityTokens = default(List<UserTokenPolicy>), string transportProfileUri = default(string), int securityLevel = 0)
        {
            this.EndpointUrl = endpointUrl;
            this.Server = server;
            this.ServerCertificate = serverCertificate;
            this.SecurityMode = securityMode;
            this.SecurityPolicyUri = securityPolicyUri;
            this.UserIdentityTokens = userIdentityTokens;
            this.TransportProfileUri = transportProfileUri;
            this.SecurityLevel = securityLevel;
        }

        /// <summary>
        /// Gets or Sets EndpointUrl
        /// </summary>
        [DataMember(Name = "EndpointUrl", EmitDefaultValue = false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "Server", EmitDefaultValue = false)]
        public ApplicationDescription Server { get; set; }

        /// <summary>
        /// Gets or Sets ServerCertificate
        /// </summary>
        [DataMember(Name = "ServerCertificate", EmitDefaultValue = false)]
        public byte[] ServerCertificate { get; set; }

        /// <summary>
        /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.3.10).
        /// </summary>
        /// <value>[Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.3.10).</value>
        [DataMember(Name = "SecurityMode", EmitDefaultValue = false)]
        public int SecurityMode { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPolicyUri
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", EmitDefaultValue = false)]
        public string SecurityPolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets UserIdentityTokens
        /// </summary>
        [DataMember(Name = "UserIdentityTokens", EmitDefaultValue = false)]
        public List<UserTokenPolicy> UserIdentityTokens { get; set; }

        /// <summary>
        /// Gets or Sets TransportProfileUri
        /// </summary>
        [DataMember(Name = "TransportProfileUri", EmitDefaultValue = false)]
        public string TransportProfileUri { get; set; }

        /// <summary>
        /// Gets or Sets SecurityLevel
        /// </summary>
        [DataMember(Name = "SecurityLevel", EmitDefaultValue = false)]
        public int SecurityLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndpointDescription {\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  ServerCertificate: ").Append(ServerCertificate).Append("\n");
            sb.Append("  SecurityMode: ").Append(SecurityMode).Append("\n");
            sb.Append("  SecurityPolicyUri: ").Append(SecurityPolicyUri).Append("\n");
            sb.Append("  UserIdentityTokens: ").Append(UserIdentityTokens).Append("\n");
            sb.Append("  TransportProfileUri: ").Append(TransportProfileUri).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SecurityLevel (int) maximum
            if (this.SecurityLevel > (int)255)
            {
                yield return new ValidationResult("Invalid value for SecurityLevel, must be a value less than or equal to 255.", new [] { "SecurityLevel" });
            }

            // SecurityLevel (int) minimum
            if (this.SecurityLevel < (int)0)
            {
                yield return new ValidationResult("Invalid value for SecurityLevel, must be a value greater than or equal to 0.", new [] { "SecurityLevel" });
            }

            yield break;
        }
    }

}
