/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// EventFilterResult
    /// </summary>
    [DataContract(Name = "EventFilterResult")]
    public partial class EventFilterResult : IEquatable<EventFilterResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventFilterResult" /> class.
        /// </summary>
        /// <param name="selectClauseResults">selectClauseResults.</param>
        /// <param name="selectClauseDiagnosticInfos">selectClauseDiagnosticInfos.</param>
        /// <param name="whereClauseResult">whereClauseResult.</param>
        public EventFilterResult(List<long> selectClauseResults = default(List<long>), List<DiagnosticInfo> selectClauseDiagnosticInfos = default(List<DiagnosticInfo>), ContentFilterResult whereClauseResult = default(ContentFilterResult))
        {
            this.SelectClauseResults = selectClauseResults;
            this.SelectClauseDiagnosticInfos = selectClauseDiagnosticInfos;
            this.WhereClauseResult = whereClauseResult;
        }

        /// <summary>
        /// Gets or Sets SelectClauseResults
        /// </summary>
        [DataMember(Name = "SelectClauseResults", EmitDefaultValue = false)]
        public List<long> SelectClauseResults { get; set; }

        /// <summary>
        /// Gets or Sets SelectClauseDiagnosticInfos
        /// </summary>
        [DataMember(Name = "SelectClauseDiagnosticInfos", EmitDefaultValue = false)]
        public List<DiagnosticInfo> SelectClauseDiagnosticInfos { get; set; }

        /// <summary>
        /// Gets or Sets WhereClauseResult
        /// </summary>
        [DataMember(Name = "WhereClauseResult", EmitDefaultValue = false)]
        public ContentFilterResult WhereClauseResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventFilterResult {\n");
            sb.Append("  SelectClauseResults: ").Append(SelectClauseResults).Append("\n");
            sb.Append("  SelectClauseDiagnosticInfos: ").Append(SelectClauseDiagnosticInfos).Append("\n");
            sb.Append("  WhereClauseResult: ").Append(WhereClauseResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventFilterResult);
        }

        /// <summary>
        /// Returns true if EventFilterResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EventFilterResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventFilterResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SelectClauseResults == input.SelectClauseResults ||
                    this.SelectClauseResults != null &&
                    input.SelectClauseResults != null &&
                    this.SelectClauseResults.SequenceEqual(input.SelectClauseResults)
                ) && 
                (
                    this.SelectClauseDiagnosticInfos == input.SelectClauseDiagnosticInfos ||
                    this.SelectClauseDiagnosticInfos != null &&
                    input.SelectClauseDiagnosticInfos != null &&
                    this.SelectClauseDiagnosticInfos.SequenceEqual(input.SelectClauseDiagnosticInfos)
                ) && 
                (
                    this.WhereClauseResult == input.WhereClauseResult ||
                    (this.WhereClauseResult != null &&
                    this.WhereClauseResult.Equals(input.WhereClauseResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectClauseResults != null)
                {
                    hashCode = (hashCode * 59) + this.SelectClauseResults.GetHashCode();
                }
                if (this.SelectClauseDiagnosticInfos != null)
                {
                    hashCode = (hashCode * 59) + this.SelectClauseDiagnosticInfos.GetHashCode();
                }
                if (this.WhereClauseResult != null)
                {
                    hashCode = (hashCode * 59) + this.WhereClauseResult.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
