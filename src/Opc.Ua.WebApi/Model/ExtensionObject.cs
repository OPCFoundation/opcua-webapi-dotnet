/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ExtensionObject
    /// </summary>
    [DataContract(Name = "ExtensionObject")]
    public partial class ExtensionObject : IEquatable<ExtensionObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionObject" /> class.
        /// </summary>
        /// <param name="typeId">typeId.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="body">body.</param>
        public ExtensionObject(string typeId = default(string), int encoding = default(int), Object body = default(Object))
        {
            this.TypeId = typeId;
            this.Encoding = encoding;
            this.Body = body;
        }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "TypeId", EmitDefaultValue = false)]
        public string TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "Encoding", EmitDefaultValue = false)]
        public int Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "Body", EmitDefaultValue = false)]
        public Object Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionObject {\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionObject);
        }

        /// <summary>
        /// Returns true if ExtensionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    this.Encoding.Equals(input.Encoding)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encoding.GetHashCode();
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Encoding (int) maximum
            if (this.Encoding > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Encoding, must be a value less than or equal to 255.", new [] { "Encoding" });
            }

            // Encoding (int) minimum
            if (this.Encoding < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Encoding, must be a value greater than or equal to 0.", new [] { "Encoding" });
            }

            yield break;
        }
    }

}
