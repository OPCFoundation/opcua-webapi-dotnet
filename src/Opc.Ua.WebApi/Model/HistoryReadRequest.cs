/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// HistoryReadRequest
    /// </summary>
    [DataContract(Name = "HistoryReadRequest")]
    public partial class HistoryReadRequest : IEquatable<HistoryReadRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryReadRequest" /> class.
        /// </summary>
        /// <param name="requestHeader">requestHeader.</param>
        /// <param name="historyReadDetails">historyReadDetails.</param>
        /// <param name="timestampsToReturn">timestampsToReturn.</param>
        /// <param name="releaseContinuationPoints">releaseContinuationPoints.</param>
        /// <param name="nodesToRead">nodesToRead.</param>
        public HistoryReadRequest(RequestHeader requestHeader = default(RequestHeader), ExtensionObject historyReadDetails = default(ExtensionObject), int timestampsToReturn = default(int), bool releaseContinuationPoints = default(bool), List<HistoryReadValueId> nodesToRead = default(List<HistoryReadValueId>))
        {
            this.RequestHeader = requestHeader;
            this.HistoryReadDetails = historyReadDetails;
            this.TimestampsToReturn = timestampsToReturn;
            this.ReleaseContinuationPoints = releaseContinuationPoints;
            this.NodesToRead = nodesToRead;
        }

        /// <summary>
        /// Gets or Sets RequestHeader
        /// </summary>
        [DataMember(Name = "RequestHeader", EmitDefaultValue = false)]
        public RequestHeader RequestHeader { get; set; }

        /// <summary>
        /// Gets or Sets HistoryReadDetails
        /// </summary>
        [DataMember(Name = "HistoryReadDetails", EmitDefaultValue = false)]
        public ExtensionObject HistoryReadDetails { get; set; }

        /// <summary>
        /// Gets or Sets TimestampsToReturn
        /// </summary>
        [DataMember(Name = "TimestampsToReturn", EmitDefaultValue = false)]
        public int TimestampsToReturn { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseContinuationPoints
        /// </summary>
        [DataMember(Name = "ReleaseContinuationPoints", EmitDefaultValue = true)]
        public bool ReleaseContinuationPoints { get; set; }

        /// <summary>
        /// Gets or Sets NodesToRead
        /// </summary>
        [DataMember(Name = "NodesToRead", EmitDefaultValue = false)]
        public List<HistoryReadValueId> NodesToRead { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryReadRequest {\n");
            sb.Append("  RequestHeader: ").Append(RequestHeader).Append("\n");
            sb.Append("  HistoryReadDetails: ").Append(HistoryReadDetails).Append("\n");
            sb.Append("  TimestampsToReturn: ").Append(TimestampsToReturn).Append("\n");
            sb.Append("  ReleaseContinuationPoints: ").Append(ReleaseContinuationPoints).Append("\n");
            sb.Append("  NodesToRead: ").Append(NodesToRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryReadRequest);
        }

        /// <summary>
        /// Returns true if HistoryReadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryReadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryReadRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestHeader == input.RequestHeader ||
                    (this.RequestHeader != null &&
                    this.RequestHeader.Equals(input.RequestHeader))
                ) && 
                (
                    this.HistoryReadDetails == input.HistoryReadDetails ||
                    (this.HistoryReadDetails != null &&
                    this.HistoryReadDetails.Equals(input.HistoryReadDetails))
                ) && 
                (
                    this.TimestampsToReturn == input.TimestampsToReturn ||
                    this.TimestampsToReturn.Equals(input.TimestampsToReturn)
                ) && 
                (
                    this.ReleaseContinuationPoints == input.ReleaseContinuationPoints ||
                    this.ReleaseContinuationPoints.Equals(input.ReleaseContinuationPoints)
                ) && 
                (
                    this.NodesToRead == input.NodesToRead ||
                    this.NodesToRead != null &&
                    input.NodesToRead != null &&
                    this.NodesToRead.SequenceEqual(input.NodesToRead)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestHeader != null)
                {
                    hashCode = (hashCode * 59) + this.RequestHeader.GetHashCode();
                }
                if (this.HistoryReadDetails != null)
                {
                    hashCode = (hashCode * 59) + this.HistoryReadDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimestampsToReturn.GetHashCode();
                hashCode = (hashCode * 59) + this.ReleaseContinuationPoints.GetHashCode();
                if (this.NodesToRead != null)
                {
                    hashCode = (hashCode * 59) + this.NodesToRead.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
