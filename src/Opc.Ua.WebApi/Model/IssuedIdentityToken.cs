/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// IssuedIdentityToken
    /// </summary>
    [DataContract(Name = "IssuedIdentityToken")]
    public partial class IssuedIdentityToken : IEquatable<IssuedIdentityToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedIdentityToken" /> class.
        /// </summary>
        /// <param name="tokenData">tokenData.</param>
        /// <param name="encryptionAlgorithm">encryptionAlgorithm.</param>
        /// <param name="policyId">policyId.</param>
        public IssuedIdentityToken(byte[] tokenData = default(byte[]), string encryptionAlgorithm = default(string), string policyId = default(string))
        {
            this.TokenData = tokenData;
            this.EncryptionAlgorithm = encryptionAlgorithm;
            this.PolicyId = policyId;
        }

        /// <summary>
        /// Gets or Sets TokenData
        /// </summary>
        [DataMember(Name = "TokenData", EmitDefaultValue = false)]
        public byte[] TokenData { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionAlgorithm
        /// </summary>
        [DataMember(Name = "EncryptionAlgorithm", EmitDefaultValue = false)]
        public string EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [DataMember(Name = "PolicyId", EmitDefaultValue = false)]
        public string PolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedIdentityToken {\n");
            sb.Append("  TokenData: ").Append(TokenData).Append("\n");
            sb.Append("  EncryptionAlgorithm: ").Append(EncryptionAlgorithm).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedIdentityToken);
        }

        /// <summary>
        /// Returns true if IssuedIdentityToken instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedIdentityToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedIdentityToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenData == input.TokenData ||
                    (this.TokenData != null &&
                    this.TokenData.Equals(input.TokenData))
                ) && 
                (
                    this.EncryptionAlgorithm == input.EncryptionAlgorithm ||
                    (this.EncryptionAlgorithm != null &&
                    this.EncryptionAlgorithm.Equals(input.EncryptionAlgorithm))
                ) && 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenData != null)
                {
                    hashCode = (hashCode * 59) + this.TokenData.GetHashCode();
                }
                if (this.EncryptionAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.EncryptionAlgorithm.GetHashCode();
                }
                if (this.PolicyId != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
