/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification]().
    /// </summary>
    [DataContract(Name = "JsonActionMetaDataMessage")]
    public partial class JsonActionMetaDataMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonActionMetaDataMessage" /> class.
        /// </summary>
        /// <param name="messageId">messageId.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="publisherId">publisherId.</param>
        /// <param name="dataSetWriterId">dataSetWriterId (default to 0).</param>
        /// <param name="dataSetWriterName">dataSetWriterName.</param>
        /// <param name="timestamp">timestamp (default to &quot;0001-01-01T00:00Z&quot;).</param>
        /// <param name="actionTargets">actionTargets.</param>
        /// <param name="request">request.</param>
        /// <param name="response">response.</param>
        /// <param name="actionMethods">actionMethods.</param>
        public JsonActionMetaDataMessage(string messageId = default(string), string messageType = default(string), string publisherId = default(string), int dataSetWriterId = 0, string dataSetWriterName = default(string), DateTime timestamp = default(DateTime), List<ActionTargetDataType> actionTargets = default(List<ActionTargetDataType>), DataSetMetaDataType request = default(DataSetMetaDataType), DataSetMetaDataType response = default(DataSetMetaDataType), List<ActionMethodDataType> actionMethods = default(List<ActionMethodDataType>))
        {
            this.MessageId = messageId;
            this.MessageType = messageType;
            this.PublisherId = publisherId;
            this.DataSetWriterId = dataSetWriterId;
            this.DataSetWriterName = dataSetWriterName;
            this.Timestamp = timestamp;
            this.ActionTargets = actionTargets;
            this.Request = request;
            this.Response = response;
            this.ActionMethods = actionMethods;
        }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "MessageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "MessageType", EmitDefaultValue = false)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets PublisherId
        /// </summary>
        [DataMember(Name = "PublisherId", EmitDefaultValue = false)]
        public string PublisherId { get; set; }

        /// <summary>
        /// Gets or Sets DataSetWriterId
        /// </summary>
        [DataMember(Name = "DataSetWriterId", EmitDefaultValue = false)]
        public int DataSetWriterId { get; set; }

        /// <summary>
        /// Gets or Sets DataSetWriterName
        /// </summary>
        [DataMember(Name = "DataSetWriterName", EmitDefaultValue = false)]
        public string DataSetWriterName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ActionTargets
        /// </summary>
        [DataMember(Name = "ActionTargets", EmitDefaultValue = false)]
        public List<ActionTargetDataType> ActionTargets { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "Request", EmitDefaultValue = false)]
        public DataSetMetaDataType Request { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "Response", EmitDefaultValue = false)]
        public DataSetMetaDataType Response { get; set; }

        /// <summary>
        /// Gets or Sets ActionMethods
        /// </summary>
        [DataMember(Name = "ActionMethods", EmitDefaultValue = false)]
        public List<ActionMethodDataType> ActionMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonActionMetaDataMessage {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  PublisherId: ").Append(PublisherId).Append("\n");
            sb.Append("  DataSetWriterId: ").Append(DataSetWriterId).Append("\n");
            sb.Append("  DataSetWriterName: ").Append(DataSetWriterName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ActionTargets: ").Append(ActionTargets).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  ActionMethods: ").Append(ActionMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DataSetWriterId (int) maximum
            if (this.DataSetWriterId > (int)65535)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value less than or equal to 65535.", new [] { "DataSetWriterId" });
            }

            // DataSetWriterId (int) minimum
            if (this.DataSetWriterId < (int)0)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value greater than or equal to 0.", new [] { "DataSetWriterId" });
            }

            yield break;
        }
    }

}
