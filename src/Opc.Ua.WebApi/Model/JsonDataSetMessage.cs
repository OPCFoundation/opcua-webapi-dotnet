/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// JsonDataSetMessage
    /// </summary>
    [DataContract(Name = "JsonDataSetMessage")]
    public partial class JsonDataSetMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonDataSetMessage" /> class.
        /// </summary>
        /// <param name="dataSetWriterId">dataSetWriterId (default to 0).</param>
        /// <param name="dataSetWriterName">dataSetWriterName.</param>
        /// <param name="publisherId">publisherId.</param>
        /// <param name="writerGroupName">writerGroupName.</param>
        /// <param name="sequenceNumber">sequenceNumber (default to 0).</param>
        /// <param name="metaDataVersion">metaDataVersion.</param>
        /// <param name="minorVersion">minorVersion (default to 0).</param>
        /// <param name="timestamp">timestamp (default to &quot;0001-01-01T00:00Z&quot;).</param>
        /// <param name="status">status.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="payload">payload.</param>
        public JsonDataSetMessage(int dataSetWriterId = 0, string dataSetWriterName = default(string), string publisherId = default(string), string writerGroupName = default(string), long sequenceNumber = 0, ConfigurationVersionDataType metaDataVersion = default(ConfigurationVersionDataType), long minorVersion = 0, DateTime timestamp = default(DateTime), StatusCode status = default(StatusCode), string messageType = default(string), Object payload = default(Object))
        {
            this.DataSetWriterId = dataSetWriterId;
            this.DataSetWriterName = dataSetWriterName;
            this.PublisherId = publisherId;
            this.WriterGroupName = writerGroupName;
            this.SequenceNumber = sequenceNumber;
            this.MetaDataVersion = metaDataVersion;
            this.MinorVersion = minorVersion;
            this.Timestamp = timestamp;
            this.Status = status;
            this.MessageType = messageType;
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets DataSetWriterId
        /// </summary>
        [DataMember(Name = "DataSetWriterId", EmitDefaultValue = false)]
        public int DataSetWriterId { get; set; }

        /// <summary>
        /// Gets or Sets DataSetWriterName
        /// </summary>
        [DataMember(Name = "DataSetWriterName", EmitDefaultValue = false)]
        public string DataSetWriterName { get; set; }

        /// <summary>
        /// Gets or Sets PublisherId
        /// </summary>
        [DataMember(Name = "PublisherId", EmitDefaultValue = false)]
        public string PublisherId { get; set; }

        /// <summary>
        /// Gets or Sets WriterGroupName
        /// </summary>
        [DataMember(Name = "WriterGroupName", EmitDefaultValue = false)]
        public string WriterGroupName { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name = "SequenceNumber", EmitDefaultValue = false)]
        public long SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataVersion
        /// </summary>
        [DataMember(Name = "MetaDataVersion", EmitDefaultValue = false)]
        public ConfigurationVersionDataType MetaDataVersion { get; set; }

        /// <summary>
        /// Gets or Sets MinorVersion
        /// </summary>
        [DataMember(Name = "MinorVersion", EmitDefaultValue = false)]
        public long MinorVersion { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusCode Status { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "MessageType", EmitDefaultValue = false)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "Payload", EmitDefaultValue = false)]
        public Object Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonDataSetMessage {\n");
            sb.Append("  DataSetWriterId: ").Append(DataSetWriterId).Append("\n");
            sb.Append("  DataSetWriterName: ").Append(DataSetWriterName).Append("\n");
            sb.Append("  PublisherId: ").Append(PublisherId).Append("\n");
            sb.Append("  WriterGroupName: ").Append(WriterGroupName).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  MetaDataVersion: ").Append(MetaDataVersion).Append("\n");
            sb.Append("  MinorVersion: ").Append(MinorVersion).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DataSetWriterId (int) maximum
            if (this.DataSetWriterId > (int)65535)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value less than or equal to 65535.", new [] { "DataSetWriterId" });
            }

            // DataSetWriterId (int) minimum
            if (this.DataSetWriterId < (int)0)
            {
                yield return new ValidationResult("Invalid value for DataSetWriterId, must be a value greater than or equal to 0.", new [] { "DataSetWriterId" });
            }

            // SequenceNumber (long) maximum
            if (this.SequenceNumber > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for SequenceNumber, must be a value less than or equal to 4294967295.", new [] { "SequenceNumber" });
            }

            // SequenceNumber (long) minimum
            if (this.SequenceNumber < (long)0)
            {
                yield return new ValidationResult("Invalid value for SequenceNumber, must be a value greater than or equal to 0.", new [] { "SequenceNumber" });
            }

            // MinorVersion (long) maximum
            if (this.MinorVersion > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for MinorVersion, must be a value less than or equal to 4294967295.", new [] { "MinorVersion" });
            }

            // MinorVersion (long) minimum
            if (this.MinorVersion < (long)0)
            {
                yield return new ValidationResult("Invalid value for MinorVersion, must be a value greater than or equal to 0.", new [] { "MinorVersion" });
            }

            yield break;
        }
    }

}
