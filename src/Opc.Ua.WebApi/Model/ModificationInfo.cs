/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ModificationInfo
    /// </summary>
    [DataContract(Name = "ModificationInfo")]
    public partial class ModificationInfo : IEquatable<ModificationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModificationInfo" /> class.
        /// </summary>
        /// <param name="modificationTime">modificationTime.</param>
        /// <param name="updateType">updateType.</param>
        /// <param name="userName">userName.</param>
        public ModificationInfo(DateTime modificationTime = default(DateTime), int updateType = default(int), string userName = default(string))
        {
            this.ModificationTime = modificationTime;
            this.UpdateType = updateType;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or Sets ModificationTime
        /// </summary>
        [DataMember(Name = "ModificationTime", EmitDefaultValue = false)]
        public DateTime ModificationTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateType
        /// </summary>
        [DataMember(Name = "UpdateType", EmitDefaultValue = false)]
        public int UpdateType { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModificationInfo {\n");
            sb.Append("  ModificationTime: ").Append(ModificationTime).Append("\n");
            sb.Append("  UpdateType: ").Append(UpdateType).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModificationInfo);
        }

        /// <summary>
        /// Returns true if ModificationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ModificationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModificationInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ModificationTime == input.ModificationTime ||
                    (this.ModificationTime != null &&
                    this.ModificationTime.Equals(input.ModificationTime))
                ) && 
                (
                    this.UpdateType == input.UpdateType ||
                    this.UpdateType.Equals(input.UpdateType)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModificationTime != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateType.GetHashCode();
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
