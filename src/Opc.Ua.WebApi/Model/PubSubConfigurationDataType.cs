/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// PubSubConfigurationDataType
    /// </summary>
    [DataContract(Name = "PubSubConfigurationDataType")]
    public partial class PubSubConfigurationDataType : IEquatable<PubSubConfigurationDataType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PubSubConfigurationDataType" /> class.
        /// </summary>
        /// <param name="publishedDataSets">publishedDataSets.</param>
        /// <param name="connections">connections.</param>
        /// <param name="enabled">enabled.</param>
        public PubSubConfigurationDataType(List<PublishedDataSetDataType> publishedDataSets = default(List<PublishedDataSetDataType>), List<PubSubConnectionDataType> connections = default(List<PubSubConnectionDataType>), bool enabled = default(bool))
        {
            this.PublishedDataSets = publishedDataSets;
            this.Connections = connections;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Gets or Sets PublishedDataSets
        /// </summary>
        [DataMember(Name = "PublishedDataSets", EmitDefaultValue = false)]
        public List<PublishedDataSetDataType> PublishedDataSets { get; set; }

        /// <summary>
        /// Gets or Sets Connections
        /// </summary>
        [DataMember(Name = "Connections", EmitDefaultValue = false)]
        public List<PubSubConnectionDataType> Connections { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PubSubConfigurationDataType {\n");
            sb.Append("  PublishedDataSets: ").Append(PublishedDataSets).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PubSubConfigurationDataType);
        }

        /// <summary>
        /// Returns true if PubSubConfigurationDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of PubSubConfigurationDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PubSubConfigurationDataType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PublishedDataSets == input.PublishedDataSets ||
                    this.PublishedDataSets != null &&
                    input.PublishedDataSets != null &&
                    this.PublishedDataSets.SequenceEqual(input.PublishedDataSets)
                ) && 
                (
                    this.Connections == input.Connections ||
                    this.Connections != null &&
                    input.Connections != null &&
                    this.Connections.SequenceEqual(input.Connections)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublishedDataSets != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedDataSets.GetHashCode();
                }
                if (this.Connections != null)
                {
                    hashCode = (hashCode * 59) + this.Connections.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
