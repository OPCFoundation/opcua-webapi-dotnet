/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.12/#6.2.12.3).
    /// </summary>
    [DataContract(Name = "PubSubKeyPushTargetDataType")]
    public partial class PubSubKeyPushTargetDataType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PubSubKeyPushTargetDataType" /> class.
        /// </summary>
        /// <param name="applicationUri">applicationUri.</param>
        /// <param name="pushTargetFolder">pushTargetFolder.</param>
        /// <param name="endpointUrl">endpointUrl.</param>
        /// <param name="securityPolicyUri">securityPolicyUri.</param>
        /// <param name="userTokenType">userTokenType.</param>
        /// <param name="requestedKeyCount">requestedKeyCount (default to 0).</param>
        /// <param name="retryInterval">retryInterval (default to 0D).</param>
        /// <param name="pushTargetProperties">pushTargetProperties.</param>
        /// <param name="securityGroups">securityGroups.</param>
        public PubSubKeyPushTargetDataType(string applicationUri = default(string), List<string> pushTargetFolder = default(List<string>), string endpointUrl = default(string), string securityPolicyUri = default(string), UserTokenPolicy userTokenType = default(UserTokenPolicy), int requestedKeyCount = 0, double retryInterval = 0D, List<KeyValuePair> pushTargetProperties = default(List<KeyValuePair>), List<string> securityGroups = default(List<string>))
        {
            this.ApplicationUri = applicationUri;
            this.PushTargetFolder = pushTargetFolder;
            this.EndpointUrl = endpointUrl;
            this.SecurityPolicyUri = securityPolicyUri;
            this.UserTokenType = userTokenType;
            this.RequestedKeyCount = requestedKeyCount;
            this.RetryInterval = retryInterval;
            this.PushTargetProperties = pushTargetProperties;
            this.SecurityGroups = securityGroups;
        }

        /// <summary>
        /// Gets or Sets ApplicationUri
        /// </summary>
        [DataMember(Name = "ApplicationUri", EmitDefaultValue = false)]
        public string ApplicationUri { get; set; }

        /// <summary>
        /// Gets or Sets PushTargetFolder
        /// </summary>
        [DataMember(Name = "PushTargetFolder", EmitDefaultValue = false)]
        public List<string> PushTargetFolder { get; set; }

        /// <summary>
        /// Gets or Sets EndpointUrl
        /// </summary>
        [DataMember(Name = "EndpointUrl", EmitDefaultValue = false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPolicyUri
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", EmitDefaultValue = false)]
        public string SecurityPolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets UserTokenType
        /// </summary>
        [DataMember(Name = "UserTokenType", EmitDefaultValue = false)]
        public UserTokenPolicy UserTokenType { get; set; }

        /// <summary>
        /// Gets or Sets RequestedKeyCount
        /// </summary>
        [DataMember(Name = "RequestedKeyCount", EmitDefaultValue = false)]
        public int RequestedKeyCount { get; set; }

        /// <summary>
        /// Gets or Sets RetryInterval
        /// </summary>
        [DataMember(Name = "RetryInterval", EmitDefaultValue = false)]
        public double RetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets PushTargetProperties
        /// </summary>
        [DataMember(Name = "PushTargetProperties", EmitDefaultValue = false)]
        public List<KeyValuePair> PushTargetProperties { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroups
        /// </summary>
        [DataMember(Name = "SecurityGroups", EmitDefaultValue = false)]
        public List<string> SecurityGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PubSubKeyPushTargetDataType {\n");
            sb.Append("  ApplicationUri: ").Append(ApplicationUri).Append("\n");
            sb.Append("  PushTargetFolder: ").Append(PushTargetFolder).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  SecurityPolicyUri: ").Append(SecurityPolicyUri).Append("\n");
            sb.Append("  UserTokenType: ").Append(UserTokenType).Append("\n");
            sb.Append("  RequestedKeyCount: ").Append(RequestedKeyCount).Append("\n");
            sb.Append("  RetryInterval: ").Append(RetryInterval).Append("\n");
            sb.Append("  PushTargetProperties: ").Append(PushTargetProperties).Append("\n");
            sb.Append("  SecurityGroups: ").Append(SecurityGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequestedKeyCount (int) maximum
            if (this.RequestedKeyCount > (int)65535)
            {
                yield return new ValidationResult("Invalid value for RequestedKeyCount, must be a value less than or equal to 65535.", new [] { "RequestedKeyCount" });
            }

            // RequestedKeyCount (int) minimum
            if (this.RequestedKeyCount < (int)0)
            {
                yield return new ValidationResult("Invalid value for RequestedKeyCount, must be a value greater than or equal to 0.", new [] { "RequestedKeyCount" });
            }

            yield break;
        }
    }

}
