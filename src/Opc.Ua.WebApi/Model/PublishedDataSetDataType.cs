/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// PublishedDataSetDataType
    /// </summary>
    [DataContract(Name = "PublishedDataSetDataType")]
    public partial class PublishedDataSetDataType : IEquatable<PublishedDataSetDataType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishedDataSetDataType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="dataSetFolder">dataSetFolder.</param>
        /// <param name="dataSetMetaData">dataSetMetaData.</param>
        /// <param name="extensionFields">extensionFields.</param>
        /// <param name="dataSetSource">dataSetSource.</param>
        public PublishedDataSetDataType(string name = default(string), List<string> dataSetFolder = default(List<string>), DataSetMetaDataType dataSetMetaData = default(DataSetMetaDataType), List<KeyValuePair> extensionFields = default(List<KeyValuePair>), ExtensionObject dataSetSource = default(ExtensionObject))
        {
            this.Name = name;
            this.DataSetFolder = dataSetFolder;
            this.DataSetMetaData = dataSetMetaData;
            this.ExtensionFields = extensionFields;
            this.DataSetSource = dataSetSource;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataSetFolder
        /// </summary>
        [DataMember(Name = "DataSetFolder", EmitDefaultValue = false)]
        public List<string> DataSetFolder { get; set; }

        /// <summary>
        /// Gets or Sets DataSetMetaData
        /// </summary>
        [DataMember(Name = "DataSetMetaData", EmitDefaultValue = false)]
        public DataSetMetaDataType DataSetMetaData { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionFields
        /// </summary>
        [DataMember(Name = "ExtensionFields", EmitDefaultValue = false)]
        public List<KeyValuePair> ExtensionFields { get; set; }

        /// <summary>
        /// Gets or Sets DataSetSource
        /// </summary>
        [DataMember(Name = "DataSetSource", EmitDefaultValue = false)]
        public ExtensionObject DataSetSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublishedDataSetDataType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataSetFolder: ").Append(DataSetFolder).Append("\n");
            sb.Append("  DataSetMetaData: ").Append(DataSetMetaData).Append("\n");
            sb.Append("  ExtensionFields: ").Append(ExtensionFields).Append("\n");
            sb.Append("  DataSetSource: ").Append(DataSetSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublishedDataSetDataType);
        }

        /// <summary>
        /// Returns true if PublishedDataSetDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of PublishedDataSetDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishedDataSetDataType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DataSetFolder == input.DataSetFolder ||
                    this.DataSetFolder != null &&
                    input.DataSetFolder != null &&
                    this.DataSetFolder.SequenceEqual(input.DataSetFolder)
                ) && 
                (
                    this.DataSetMetaData == input.DataSetMetaData ||
                    (this.DataSetMetaData != null &&
                    this.DataSetMetaData.Equals(input.DataSetMetaData))
                ) && 
                (
                    this.ExtensionFields == input.ExtensionFields ||
                    this.ExtensionFields != null &&
                    input.ExtensionFields != null &&
                    this.ExtensionFields.SequenceEqual(input.ExtensionFields)
                ) && 
                (
                    this.DataSetSource == input.DataSetSource ||
                    (this.DataSetSource != null &&
                    this.DataSetSource.Equals(input.DataSetSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DataSetFolder != null)
                {
                    hashCode = (hashCode * 59) + this.DataSetFolder.GetHashCode();
                }
                if (this.DataSetMetaData != null)
                {
                    hashCode = (hashCode * 59) + this.DataSetMetaData.GetHashCode();
                }
                if (this.ExtensionFields != null)
                {
                    hashCode = (hashCode * 59) + this.ExtensionFields.GetHashCode();
                }
                if (this.DataSetSource != null)
                {
                    hashCode = (hashCode * 59) + this.DataSetSource.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
