/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ReadProcessedDetails
    /// </summary>
    [DataContract(Name = "ReadProcessedDetails")]
    public partial class ReadProcessedDetails : IEquatable<ReadProcessedDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadProcessedDetails" /> class.
        /// </summary>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="processingInterval">processingInterval.</param>
        /// <param name="aggregateType">aggregateType.</param>
        /// <param name="aggregateConfiguration">aggregateConfiguration.</param>
        public ReadProcessedDetails(DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), double processingInterval = default(double), List<string> aggregateType = default(List<string>), AggregateConfiguration aggregateConfiguration = default(AggregateConfiguration))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.ProcessingInterval = processingInterval;
            this.AggregateType = aggregateType;
            this.AggregateConfiguration = aggregateConfiguration;
        }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "StartTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "EndTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingInterval
        /// </summary>
        [DataMember(Name = "ProcessingInterval", EmitDefaultValue = false)]
        public double ProcessingInterval { get; set; }

        /// <summary>
        /// Gets or Sets AggregateType
        /// </summary>
        [DataMember(Name = "AggregateType", EmitDefaultValue = false)]
        public List<string> AggregateType { get; set; }

        /// <summary>
        /// Gets or Sets AggregateConfiguration
        /// </summary>
        [DataMember(Name = "AggregateConfiguration", EmitDefaultValue = false)]
        public AggregateConfiguration AggregateConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadProcessedDetails {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ProcessingInterval: ").Append(ProcessingInterval).Append("\n");
            sb.Append("  AggregateType: ").Append(AggregateType).Append("\n");
            sb.Append("  AggregateConfiguration: ").Append(AggregateConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadProcessedDetails);
        }

        /// <summary>
        /// Returns true if ReadProcessedDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadProcessedDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadProcessedDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ProcessingInterval == input.ProcessingInterval ||
                    this.ProcessingInterval.Equals(input.ProcessingInterval)
                ) && 
                (
                    this.AggregateType == input.AggregateType ||
                    this.AggregateType != null &&
                    input.AggregateType != null &&
                    this.AggregateType.SequenceEqual(input.AggregateType)
                ) && 
                (
                    this.AggregateConfiguration == input.AggregateConfiguration ||
                    (this.AggregateConfiguration != null &&
                    this.AggregateConfiguration.Equals(input.AggregateConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProcessingInterval.GetHashCode();
                if (this.AggregateType != null)
                {
                    hashCode = (hashCode * 59) + this.AggregateType.GetHashCode();
                }
                if (this.AggregateConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.AggregateConfiguration.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
