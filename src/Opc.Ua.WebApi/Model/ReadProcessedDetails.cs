/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part11/6.5.4/#6.5.4.1).
    /// </summary>
    [DataContract(Name = "ReadProcessedDetails")]
    public partial class ReadProcessedDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadProcessedDetails" /> class.
        /// </summary>
        /// <param name="startTime">startTime (default to &quot;0001-01-01T00:00Z&quot;).</param>
        /// <param name="endTime">endTime (default to &quot;0001-01-01T00:00Z&quot;).</param>
        /// <param name="processingInterval">processingInterval (default to 0D).</param>
        /// <param name="aggregateType">aggregateType.</param>
        /// <param name="aggregateConfiguration">aggregateConfiguration.</param>
        public ReadProcessedDetails(DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), double processingInterval = 0D, List<string> aggregateType = default(List<string>), AggregateConfiguration aggregateConfiguration = default(AggregateConfiguration))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.ProcessingInterval = processingInterval;
            this.AggregateType = aggregateType;
            this.AggregateConfiguration = aggregateConfiguration;
        }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "StartTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "EndTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingInterval
        /// </summary>
        [DataMember(Name = "ProcessingInterval", EmitDefaultValue = false)]
        public double ProcessingInterval { get; set; }

        /// <summary>
        /// Gets or Sets AggregateType
        /// </summary>
        [DataMember(Name = "AggregateType", EmitDefaultValue = false)]
        public List<string> AggregateType { get; set; }

        /// <summary>
        /// Gets or Sets AggregateConfiguration
        /// </summary>
        [DataMember(Name = "AggregateConfiguration", EmitDefaultValue = false)]
        public AggregateConfiguration AggregateConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadProcessedDetails {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ProcessingInterval: ").Append(ProcessingInterval).Append("\n");
            sb.Append("  AggregateType: ").Append(AggregateType).Append("\n");
            sb.Append("  AggregateConfiguration: ").Append(AggregateConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
