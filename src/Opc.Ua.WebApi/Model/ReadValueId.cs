/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ReadValueId
    /// </summary>
    [DataContract(Name = "ReadValueId")]
    public partial class ReadValueId : IEquatable<ReadValueId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadValueId" /> class.
        /// </summary>
        /// <param name="nodeId">nodeId.</param>
        /// <param name="attributeId">attributeId.</param>
        /// <param name="indexRange">indexRange.</param>
        /// <param name="dataEncoding">dataEncoding.</param>
        public ReadValueId(string nodeId = default(string), long attributeId = default(long), string indexRange = default(string), string dataEncoding = default(string))
        {
            this.NodeId = nodeId;
            this.AttributeId = attributeId;
            this.IndexRange = indexRange;
            this.DataEncoding = dataEncoding;
        }

        /// <summary>
        /// Gets or Sets NodeId
        /// </summary>
        [DataMember(Name = "NodeId", EmitDefaultValue = false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets AttributeId
        /// </summary>
        [DataMember(Name = "AttributeId", EmitDefaultValue = false)]
        public long AttributeId { get; set; }

        /// <summary>
        /// Gets or Sets IndexRange
        /// </summary>
        [DataMember(Name = "IndexRange", EmitDefaultValue = false)]
        public string IndexRange { get; set; }

        /// <summary>
        /// Gets or Sets DataEncoding
        /// </summary>
        [DataMember(Name = "DataEncoding", EmitDefaultValue = false)]
        public string DataEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadValueId {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("  IndexRange: ").Append(IndexRange).Append("\n");
            sb.Append("  DataEncoding: ").Append(DataEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadValueId);
        }

        /// <summary>
        /// Returns true if ReadValueId instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadValueId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadValueId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.AttributeId == input.AttributeId ||
                    this.AttributeId.Equals(input.AttributeId)
                ) && 
                (
                    this.IndexRange == input.IndexRange ||
                    (this.IndexRange != null &&
                    this.IndexRange.Equals(input.IndexRange))
                ) && 
                (
                    this.DataEncoding == input.DataEncoding ||
                    (this.DataEncoding != null &&
                    this.DataEncoding.Equals(input.DataEncoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeId != null)
                {
                    hashCode = (hashCode * 59) + this.NodeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttributeId.GetHashCode();
                if (this.IndexRange != null)
                {
                    hashCode = (hashCode * 59) + this.IndexRange.GetHashCode();
                }
                if (this.DataEncoding != null)
                {
                    hashCode = (hashCode * 59) + this.DataEncoding.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttributeId (long) maximum
            if (this.AttributeId > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttributeId, must be a value less than or equal to 4294967295.", new [] { "AttributeId" });
            }

            // AttributeId (long) minimum
            if (this.AttributeId < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttributeId, must be a value greater than or equal to 0.", new [] { "AttributeId" });
            }

            yield break;
        }
    }

}
