/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.30).
    /// </summary>
    [DataContract(Name = "ReferenceDescription")]
    public partial class ReferenceDescription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDescription" /> class.
        /// </summary>
        /// <param name="referenceTypeId">referenceTypeId.</param>
        /// <param name="isForward">isForward (default to false).</param>
        /// <param name="nodeId">nodeId.</param>
        /// <param name="browseName">browseName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="nodeClass">[Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.2.5/#12.2.5.2)..</param>
        /// <param name="typeDefinition">typeDefinition.</param>
        public ReferenceDescription(string referenceTypeId = default(string), bool isForward = false, string nodeId = default(string), string browseName = default(string), LocalizedText displayName = default(LocalizedText), int nodeClass = default(int), string typeDefinition = default(string))
        {
            this.ReferenceTypeId = referenceTypeId;
            this.IsForward = isForward;
            this.NodeId = nodeId;
            this.BrowseName = browseName;
            this.DisplayName = displayName;
            this.NodeClass = nodeClass;
            this.TypeDefinition = typeDefinition;
        }

        /// <summary>
        /// Gets or Sets ReferenceTypeId
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", EmitDefaultValue = false)]
        public string ReferenceTypeId { get; set; }

        /// <summary>
        /// Gets or Sets IsForward
        /// </summary>
        [DataMember(Name = "IsForward", EmitDefaultValue = true)]
        public bool IsForward { get; set; }

        /// <summary>
        /// Gets or Sets NodeId
        /// </summary>
        [DataMember(Name = "NodeId", EmitDefaultValue = false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets BrowseName
        /// </summary>
        [DataMember(Name = "BrowseName", EmitDefaultValue = false)]
        public string BrowseName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "DisplayName", EmitDefaultValue = false)]
        public LocalizedText DisplayName { get; set; }

        /// <summary>
        /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.2.5/#12.2.5.2).
        /// </summary>
        /// <value>[Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.2.5/#12.2.5.2).</value>
        [DataMember(Name = "NodeClass", EmitDefaultValue = false)]
        public int NodeClass { get; set; }

        /// <summary>
        /// Gets or Sets TypeDefinition
        /// </summary>
        [DataMember(Name = "TypeDefinition", EmitDefaultValue = false)]
        public string TypeDefinition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferenceDescription {\n");
            sb.Append("  ReferenceTypeId: ").Append(ReferenceTypeId).Append("\n");
            sb.Append("  IsForward: ").Append(IsForward).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  BrowseName: ").Append(BrowseName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  NodeClass: ").Append(NodeClass).Append("\n");
            sb.Append("  TypeDefinition: ").Append(TypeDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
