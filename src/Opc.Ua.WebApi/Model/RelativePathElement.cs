/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// RelativePathElement
    /// </summary>
    [DataContract(Name = "RelativePathElement")]
    public partial class RelativePathElement : IEquatable<RelativePathElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelativePathElement" /> class.
        /// </summary>
        /// <param name="referenceTypeId">referenceTypeId.</param>
        /// <param name="isInverse">isInverse.</param>
        /// <param name="includeSubtypes">includeSubtypes.</param>
        /// <param name="targetName">targetName.</param>
        public RelativePathElement(string referenceTypeId = default(string), bool isInverse = default(bool), bool includeSubtypes = default(bool), string targetName = default(string))
        {
            this.ReferenceTypeId = referenceTypeId;
            this.IsInverse = isInverse;
            this.IncludeSubtypes = includeSubtypes;
            this.TargetName = targetName;
        }

        /// <summary>
        /// Gets or Sets ReferenceTypeId
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", EmitDefaultValue = false)]
        public string ReferenceTypeId { get; set; }

        /// <summary>
        /// Gets or Sets IsInverse
        /// </summary>
        [DataMember(Name = "IsInverse", EmitDefaultValue = true)]
        public bool IsInverse { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSubtypes
        /// </summary>
        [DataMember(Name = "IncludeSubtypes", EmitDefaultValue = true)]
        public bool IncludeSubtypes { get; set; }

        /// <summary>
        /// Gets or Sets TargetName
        /// </summary>
        [DataMember(Name = "TargetName", EmitDefaultValue = false)]
        public string TargetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelativePathElement {\n");
            sb.Append("  ReferenceTypeId: ").Append(ReferenceTypeId).Append("\n");
            sb.Append("  IsInverse: ").Append(IsInverse).Append("\n");
            sb.Append("  IncludeSubtypes: ").Append(IncludeSubtypes).Append("\n");
            sb.Append("  TargetName: ").Append(TargetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelativePathElement);
        }

        /// <summary>
        /// Returns true if RelativePathElement instances are equal
        /// </summary>
        /// <param name="input">Instance of RelativePathElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelativePathElement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceTypeId == input.ReferenceTypeId ||
                    (this.ReferenceTypeId != null &&
                    this.ReferenceTypeId.Equals(input.ReferenceTypeId))
                ) && 
                (
                    this.IsInverse == input.IsInverse ||
                    this.IsInverse.Equals(input.IsInverse)
                ) && 
                (
                    this.IncludeSubtypes == input.IncludeSubtypes ||
                    this.IncludeSubtypes.Equals(input.IncludeSubtypes)
                ) && 
                (
                    this.TargetName == input.TargetName ||
                    (this.TargetName != null &&
                    this.TargetName.Equals(input.TargetName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInverse.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeSubtypes.GetHashCode();
                if (this.TargetName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
