/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.34).
    /// </summary>
    [DataContract(Name = "ResponseHeader")]
    public partial class ResponseHeader : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseHeader" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (default to &quot;0001-01-01T00:00Z&quot;).</param>
        /// <param name="requestHandle">requestHandle (default to 0).</param>
        /// <param name="serviceResult">serviceResult.</param>
        /// <param name="serviceDiagnostics">serviceDiagnostics.</param>
        /// <param name="stringTable">stringTable.</param>
        /// <param name="additionalHeader">additionalHeader.</param>
        public ResponseHeader(DateTime timestamp = default(DateTime), long requestHandle = 0, StatusCode serviceResult = default(StatusCode), DiagnosticInfo serviceDiagnostics = default(DiagnosticInfo), List<string> stringTable = default(List<string>), ExtensionObject additionalHeader = default(ExtensionObject))
        {
            this.Timestamp = timestamp;
            this.RequestHandle = requestHandle;
            this.ServiceResult = serviceResult;
            this.ServiceDiagnostics = serviceDiagnostics;
            this.StringTable = stringTable;
            this.AdditionalHeader = additionalHeader;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets RequestHandle
        /// </summary>
        [DataMember(Name = "RequestHandle", EmitDefaultValue = false)]
        public long RequestHandle { get; set; }

        /// <summary>
        /// Gets or Sets ServiceResult
        /// </summary>
        [DataMember(Name = "ServiceResult", EmitDefaultValue = false)]
        public StatusCode ServiceResult { get; set; }

        /// <summary>
        /// Gets or Sets ServiceDiagnostics
        /// </summary>
        [DataMember(Name = "ServiceDiagnostics", EmitDefaultValue = false)]
        public DiagnosticInfo ServiceDiagnostics { get; set; }

        /// <summary>
        /// Gets or Sets StringTable
        /// </summary>
        [DataMember(Name = "StringTable", EmitDefaultValue = false)]
        public List<string> StringTable { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalHeader
        /// </summary>
        [DataMember(Name = "AdditionalHeader", EmitDefaultValue = false)]
        public ExtensionObject AdditionalHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseHeader {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RequestHandle: ").Append(RequestHandle).Append("\n");
            sb.Append("  ServiceResult: ").Append(ServiceResult).Append("\n");
            sb.Append("  ServiceDiagnostics: ").Append(ServiceDiagnostics).Append("\n");
            sb.Append("  StringTable: ").Append(StringTable).Append("\n");
            sb.Append("  AdditionalHeader: ").Append(AdditionalHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequestHandle (long) maximum
            if (this.RequestHandle > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for RequestHandle, must be a value less than or equal to 4294967295.", new [] { "RequestHandle" });
            }

            // RequestHandle (long) minimum
            if (this.RequestHandle < (long)0)
            {
                yield return new ValidationResult("Invalid value for RequestHandle, must be a value greater than or equal to 0.", new [] { "RequestHandle" });
            }

            yield break;
        }
    }

}
