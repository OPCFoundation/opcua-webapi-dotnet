/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.12/#6.2.12.2).
    /// </summary>
    [DataContract(Name = "SecurityGroupDataType")]
    public partial class SecurityGroupDataType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroupDataType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="securityGroupFolder">securityGroupFolder.</param>
        /// <param name="keyLifetime">keyLifetime (default to 0D).</param>
        /// <param name="securityPolicyUri">securityPolicyUri.</param>
        /// <param name="maxFutureKeyCount">maxFutureKeyCount (default to 0).</param>
        /// <param name="maxPastKeyCount">maxPastKeyCount (default to 0).</param>
        /// <param name="securityGroupId">securityGroupId.</param>
        /// <param name="rolePermissions">rolePermissions.</param>
        /// <param name="groupProperties">groupProperties.</param>
        public SecurityGroupDataType(string name = default(string), List<string> securityGroupFolder = default(List<string>), double keyLifetime = 0D, string securityPolicyUri = default(string), long maxFutureKeyCount = 0, long maxPastKeyCount = 0, string securityGroupId = default(string), List<RolePermissionType> rolePermissions = default(List<RolePermissionType>), List<KeyValuePair> groupProperties = default(List<KeyValuePair>))
        {
            this.Name = name;
            this.SecurityGroupFolder = securityGroupFolder;
            this.KeyLifetime = keyLifetime;
            this.SecurityPolicyUri = securityPolicyUri;
            this.MaxFutureKeyCount = maxFutureKeyCount;
            this.MaxPastKeyCount = maxPastKeyCount;
            this.SecurityGroupId = securityGroupId;
            this.RolePermissions = rolePermissions;
            this.GroupProperties = groupProperties;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroupFolder
        /// </summary>
        [DataMember(Name = "SecurityGroupFolder", EmitDefaultValue = false)]
        public List<string> SecurityGroupFolder { get; set; }

        /// <summary>
        /// Gets or Sets KeyLifetime
        /// </summary>
        [DataMember(Name = "KeyLifetime", EmitDefaultValue = false)]
        public double KeyLifetime { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPolicyUri
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", EmitDefaultValue = false)]
        public string SecurityPolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets MaxFutureKeyCount
        /// </summary>
        [DataMember(Name = "MaxFutureKeyCount", EmitDefaultValue = false)]
        public long MaxFutureKeyCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxPastKeyCount
        /// </summary>
        [DataMember(Name = "MaxPastKeyCount", EmitDefaultValue = false)]
        public long MaxPastKeyCount { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroupId
        /// </summary>
        [DataMember(Name = "SecurityGroupId", EmitDefaultValue = false)]
        public string SecurityGroupId { get; set; }

        /// <summary>
        /// Gets or Sets RolePermissions
        /// </summary>
        [DataMember(Name = "RolePermissions", EmitDefaultValue = false)]
        public List<RolePermissionType> RolePermissions { get; set; }

        /// <summary>
        /// Gets or Sets GroupProperties
        /// </summary>
        [DataMember(Name = "GroupProperties", EmitDefaultValue = false)]
        public List<KeyValuePair> GroupProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityGroupDataType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SecurityGroupFolder: ").Append(SecurityGroupFolder).Append("\n");
            sb.Append("  KeyLifetime: ").Append(KeyLifetime).Append("\n");
            sb.Append("  SecurityPolicyUri: ").Append(SecurityPolicyUri).Append("\n");
            sb.Append("  MaxFutureKeyCount: ").Append(MaxFutureKeyCount).Append("\n");
            sb.Append("  MaxPastKeyCount: ").Append(MaxPastKeyCount).Append("\n");
            sb.Append("  SecurityGroupId: ").Append(SecurityGroupId).Append("\n");
            sb.Append("  RolePermissions: ").Append(RolePermissions).Append("\n");
            sb.Append("  GroupProperties: ").Append(GroupProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxFutureKeyCount (long) maximum
            if (this.MaxFutureKeyCount > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for MaxFutureKeyCount, must be a value less than or equal to 4294967295.", new [] { "MaxFutureKeyCount" });
            }

            // MaxFutureKeyCount (long) minimum
            if (this.MaxFutureKeyCount < (long)0)
            {
                yield return new ValidationResult("Invalid value for MaxFutureKeyCount, must be a value greater than or equal to 0.", new [] { "MaxFutureKeyCount" });
            }

            // MaxPastKeyCount (long) maximum
            if (this.MaxPastKeyCount > (long)4294967295)
            {
                yield return new ValidationResult("Invalid value for MaxPastKeyCount, must be a value less than or equal to 4294967295.", new [] { "MaxPastKeyCount" });
            }

            // MaxPastKeyCount (long) minimum
            if (this.MaxPastKeyCount < (long)0)
            {
                yield return new ValidationResult("Invalid value for MaxPastKeyCount, must be a value greater than or equal to 0.", new [] { "MaxPastKeyCount" });
            }

            yield break;
        }
    }

}
