/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// SimpleTypeDescription
    /// </summary>
    [DataContract(Name = "SimpleTypeDescription")]
    public partial class SimpleTypeDescription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleTypeDescription" /> class.
        /// </summary>
        /// <param name="baseDataType">baseDataType.</param>
        /// <param name="builtInType">builtInType (default to 0).</param>
        /// <param name="dataTypeId">dataTypeId.</param>
        /// <param name="name">name.</param>
        public SimpleTypeDescription(string baseDataType = default(string), int builtInType = 0, string dataTypeId = default(string), string name = default(string))
        {
            this.BaseDataType = baseDataType;
            this.BuiltInType = builtInType;
            this.DataTypeId = dataTypeId;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets BaseDataType
        /// </summary>
        [DataMember(Name = "BaseDataType", EmitDefaultValue = false)]
        public string BaseDataType { get; set; }

        /// <summary>
        /// Gets or Sets BuiltInType
        /// </summary>
        [DataMember(Name = "BuiltInType", EmitDefaultValue = false)]
        public int BuiltInType { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeId
        /// </summary>
        [DataMember(Name = "DataTypeId", EmitDefaultValue = false)]
        public string DataTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleTypeDescription {\n");
            sb.Append("  BaseDataType: ").Append(BaseDataType).Append("\n");
            sb.Append("  BuiltInType: ").Append(BuiltInType).Append("\n");
            sb.Append("  DataTypeId: ").Append(DataTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BuiltInType (int) maximum
            if (this.BuiltInType > (int)255)
            {
                yield return new ValidationResult("Invalid value for BuiltInType, must be a value less than or equal to 255.", new [] { "BuiltInType" });
            }

            // BuiltInType (int) minimum
            if (this.BuiltInType < (int)0)
            {
                yield return new ValidationResult("Invalid value for BuiltInType, must be a value greater than or equal to 0.", new [] { "BuiltInType" });
            }

            yield break;
        }
    }

}
