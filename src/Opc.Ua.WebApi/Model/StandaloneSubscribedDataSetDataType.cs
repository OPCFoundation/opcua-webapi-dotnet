/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// StandaloneSubscribedDataSetDataType
    /// </summary>
    [DataContract(Name = "StandaloneSubscribedDataSetDataType")]
    public partial class StandaloneSubscribedDataSetDataType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandaloneSubscribedDataSetDataType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="dataSetFolder">dataSetFolder.</param>
        /// <param name="dataSetMetaData">dataSetMetaData.</param>
        /// <param name="subscribedDataSet">subscribedDataSet.</param>
        public StandaloneSubscribedDataSetDataType(string name = default(string), List<string> dataSetFolder = default(List<string>), DataSetMetaDataType dataSetMetaData = default(DataSetMetaDataType), ExtensionObject subscribedDataSet = default(ExtensionObject))
        {
            this.Name = name;
            this.DataSetFolder = dataSetFolder;
            this.DataSetMetaData = dataSetMetaData;
            this.SubscribedDataSet = subscribedDataSet;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataSetFolder
        /// </summary>
        [DataMember(Name = "DataSetFolder", EmitDefaultValue = false)]
        public List<string> DataSetFolder { get; set; }

        /// <summary>
        /// Gets or Sets DataSetMetaData
        /// </summary>
        [DataMember(Name = "DataSetMetaData", EmitDefaultValue = false)]
        public DataSetMetaDataType DataSetMetaData { get; set; }

        /// <summary>
        /// Gets or Sets SubscribedDataSet
        /// </summary>
        [DataMember(Name = "SubscribedDataSet", EmitDefaultValue = false)]
        public ExtensionObject SubscribedDataSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandaloneSubscribedDataSetDataType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataSetFolder: ").Append(DataSetFolder).Append("\n");
            sb.Append("  DataSetMetaData: ").Append(DataSetMetaData).Append("\n");
            sb.Append("  SubscribedDataSet: ").Append(SubscribedDataSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
