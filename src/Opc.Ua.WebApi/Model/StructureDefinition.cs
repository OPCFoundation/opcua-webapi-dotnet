/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// StructureDefinition
    /// </summary>
    [DataContract(Name = "StructureDefinition")]
    public partial class StructureDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureDefinition" /> class.
        /// </summary>
        /// <param name="defaultEncodingId">defaultEncodingId.</param>
        /// <param name="baseDataType">baseDataType.</param>
        /// <param name="structureType">structureType.</param>
        /// <param name="fields">fields.</param>
        public StructureDefinition(string defaultEncodingId = default(string), string baseDataType = default(string), int structureType = default(int), List<StructureField> fields = default(List<StructureField>))
        {
            this.DefaultEncodingId = defaultEncodingId;
            this.BaseDataType = baseDataType;
            this.StructureType = structureType;
            this.Fields = fields;
        }

        /// <summary>
        /// Gets or Sets DefaultEncodingId
        /// </summary>
        [DataMember(Name = "DefaultEncodingId", EmitDefaultValue = false)]
        public string DefaultEncodingId { get; set; }

        /// <summary>
        /// Gets or Sets BaseDataType
        /// </summary>
        [DataMember(Name = "BaseDataType", EmitDefaultValue = false)]
        public string BaseDataType { get; set; }

        /// <summary>
        /// Gets or Sets StructureType
        /// </summary>
        [DataMember(Name = "StructureType", EmitDefaultValue = false)]
        public int StructureType { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "Fields", EmitDefaultValue = false)]
        public List<StructureField> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructureDefinition {\n");
            sb.Append("  DefaultEncodingId: ").Append(DefaultEncodingId).Append("\n");
            sb.Append("  BaseDataType: ").Append(BaseDataType).Append("\n");
            sb.Append("  StructureType: ").Append(StructureType).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
