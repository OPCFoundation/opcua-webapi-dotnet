/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// StructureDescription
    /// </summary>
    [DataContract(Name = "StructureDescription")]
    public partial class StructureDescription : IEquatable<StructureDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureDescription" /> class.
        /// </summary>
        /// <param name="structureDefinition">structureDefinition.</param>
        /// <param name="dataTypeId">dataTypeId.</param>
        /// <param name="name">name.</param>
        public StructureDescription(StructureDefinition structureDefinition = default(StructureDefinition), string dataTypeId = default(string), string name = default(string))
        {
            this.StructureDefinition = structureDefinition;
            this.DataTypeId = dataTypeId;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets StructureDefinition
        /// </summary>
        [DataMember(Name = "StructureDefinition", EmitDefaultValue = false)]
        public StructureDefinition StructureDefinition { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeId
        /// </summary>
        [DataMember(Name = "DataTypeId", EmitDefaultValue = false)]
        public string DataTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructureDescription {\n");
            sb.Append("  StructureDefinition: ").Append(StructureDefinition).Append("\n");
            sb.Append("  DataTypeId: ").Append(DataTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureDescription);
        }

        /// <summary>
        /// Returns true if StructureDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StructureDefinition == input.StructureDefinition ||
                    (this.StructureDefinition != null &&
                    this.StructureDefinition.Equals(input.StructureDefinition))
                ) && 
                (
                    this.DataTypeId == input.DataTypeId ||
                    (this.DataTypeId != null &&
                    this.DataTypeId.Equals(input.DataTypeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StructureDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StructureDefinition.GetHashCode();
                }
                if (this.DataTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DataTypeId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
