/*
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opc.Ua.WebApi.Client.OpenAPIDateConverter;

namespace Opc.Ua.WebApi.Model
{
    /// <summary>
    /// ViewDescription
    /// </summary>
    [DataContract(Name = "ViewDescription")]
    public partial class ViewDescription : IEquatable<ViewDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewDescription" /> class.
        /// </summary>
        /// <param name="viewId">viewId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="viewVersion">viewVersion.</param>
        public ViewDescription(string viewId = default(string), DateTime timestamp = default(DateTime), long viewVersion = default(long))
        {
            this.ViewId = viewId;
            this.Timestamp = timestamp;
            this.ViewVersion = viewVersion;
        }

        /// <summary>
        /// Gets or Sets ViewId
        /// </summary>
        [DataMember(Name = "ViewId", EmitDefaultValue = false)]
        public string ViewId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ViewVersion
        /// </summary>
        [DataMember(Name = "ViewVersion", EmitDefaultValue = false)]
        public long ViewVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ViewDescription {\n");
            sb.Append("  ViewId: ").Append(ViewId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ViewVersion: ").Append(ViewVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewDescription);
        }

        /// <summary>
        /// Returns true if ViewDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ViewId == input.ViewId ||
                    (this.ViewId != null &&
                    this.ViewId.Equals(input.ViewId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.ViewVersion == input.ViewVersion ||
                    this.ViewVersion.Equals(input.ViewVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ViewId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewId.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ViewVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ViewVersion (long) maximum
            if (this.ViewVersion > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ViewVersion, must be a value less than or equal to 4294967295.", new [] { "ViewVersion" });
            }

            // ViewVersion (long) minimum
            if (this.ViewVersion < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ViewVersion, must be a value greater than or equal to 0.", new [] { "ViewVersion" });
            }

            yield break;
        }
    }

}
